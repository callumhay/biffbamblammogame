// ---------------------------------------------------------------------------
// Menu sounds/music =========================================================
// ---------------------------------------------------------------------------

// Main Menu and General Sounds **********************************************

// Main menu background music (looped)
MainMenuBackgroundLoop {
	file = menu/bg_piano.wav
}

// Plays when the user highlights (i.e., changes the selection to) a new item in a menu
MenuItemChangedSelectionEvent {
	file = menu/item_select.wav
}

// Plays when the user selects a scroller or selection list menu item
MenuItemEnteredEvent {
	file = menu/item_entered.wav
}

// Plays when the user cancels out of a scroller or selection list menu item
MenuItemCancelEvent {
	file = menu/item_cancel.wav
}

// Plays when the user verifies/selects (hits 'enter' on) a menu item
MenuItemVerifyAndSelectEvent {
	file = menu/item_confirm.wav
}

// Plays when a sub-menu or verify menu opens up
MenuOpenSubMenuWindowEvent {
	file = menu/open_sub_menu_win.wav
}

// NOTE: No sound for the closing of sub menus: It doesn't feel right when it plays since
// there's no accompanying animation

// Plays when a selection list menu item is scrolled
MenuSelectionItemScrolledEvent {
	file = menu/item_selection_list_scrolled.wav
}

// Plays when a scroller (e.g., volume control) menu item is scrolled
MenuScrollerItemScrolledEvent {
	file = menu/item_scroller_scrolled.wav
}

// Blammopedia Sounds ********************************************************

// Blammopedia background music (looped)
BlammopediaBackgroundLoop {
	file = menu/bg_blammopedia.wav
}

// Plays when the user highlights (i.e., changes the selection to) a new item in the base blammopedia menu
BlammopediaBaseMenuItemChangedSelectionEvent {
	file = menu/item_select.wav
}

// Plays when the user verifies/selects (hits 'enter' on) a base blammopedia menu item
BlammopediaBaseMenuItemSelectEvent {
	file = menu/item_confirm.wav
}

// Plays when the user highlights (i.e., changes the selection to) a new item in on of the blammopedia lists
BlammopediaListItemChangedSelectionEvent {
	file = menu/item_select.wav
}

// Plays when the user verifies/selects (hits 'enter' on) an item in one of the blammopedia lists
BlammopediaListItemSelectEvent {
	file = menu/list_item_open.wav
}

// Plays when the user cancels-out-of/deselects (hits 'esc' on) a previously activated item in one of the blammopedia lists
BlammopediaListItemDeselectEvent {
	file = menu/list_item_close.wav
}

// Plays when the user cancels out of a list and goes back to the base-blammopedia menu
BlammopediaListDeselectEvent {
	file = menu/item_cancel.wav
}

// Plays when the user attempts to select a blammopedia list item that is locked
BlammopediaListItemLockedEvent {
	file = menu/item_locked.wav
}


// World/Movement Select Menu Sounds *****************************************

// World selection menu background music (looped)
WorldMenuBackgroundLoop {
	file = menu/bg_world_select.wav
}

// Plays when the user changes which world is highlighted/selected in the world selection menu
WorldMenuItemChangedSelectionEvent {
	file = menu/item_select.wav
}

// Plays when the user confirms the selection of a world in the world selection menu
WorldMenuItemSelectEvent {
	file = menu/item_confirm.wav
}

// Plays when the user attempts to select a world that is locked in the world selection menu
WorldMenuItemLockedEvent {
	file = menu/item_locked.wav
}

// Level Select Menu Sounds **************************************************

// Level selection menu background music (looped)
LevelMenuBackgroundLoop {
	file = menu/bg_level_select.wav
}

// Plays when the user changes which level is highlighted/selected in the level selection menu
LevelMenuItemChangedSelectionEvent {
	file = menu/item_select.wav
}

// Plays when the user changes the page (among the pages of levels) in the level selection menu
LevelMenuPageChangedSelectionEvent {
	file = menu/page_changed.wav
}

// Plays when the user confirms the selection of a level in the level selection menu
LevelMenuItemSelectEvent {
	file = menu/item_confirm.wav
}

// Plays when the user attempts to select a level that is locked in the level selection menu
LevelMenuItemLockedEvent {
	file = menu/item_locked.wav
}

// In-Game Menu Sounds *******************************************************

// Plays when the player pauses the game (which opens the in-game menu)
InGameMenuOpened {
	file = menu/paused.wav
}

// Plays when the player unpauses the game (exits the in-game menu and goes back to playing)
InGameMenuClosed {
	file = menu/unpaused.wav
}

// ---------------------------------------------------------------------------
// Movement-specific Sound ===================================================
// ---------------------------------------------------------------------------

// Classical *****************************************************************
WorldBackgroundLoop {
	world = Classical
	file  =
}

// Gothic-Romantic ***********************************************************
WorldBackgroundLoop {
	world = Gothic and Romantic
	file  =
}

// Nouveau *******************************************************************
WorldBackgroundLoop {
	world = Nouveau
	file  = 
}

// Deco **********************************************************************
WorldBackgroundLoop {
	world = Deco
	file  =
}

// Futurism ******************************************************************
WorldBackgroundLoop {
	world = Futurism
	file  =
}

// ---------------------------------------------------------------------------
// In-Game Events ============================================================
// ---------------------------------------------------------------------------

// Paddle Events *************************************************************

PaddleHitWallEvent {
	file = global/paddle_hit_wall.ogg
}


// Ball Events ***************************************************************

PlayerLostABallButIsStillAliveEvent {
	file = global/lost_ball.ogg
}

LastBallExplodedEvent {
	file = global/last_ball_death.ogg
}

BallSpawnEvent {
	file = 
}

BallBallCollisionEvent {
	file = global/ball_ball_hit.ogg
}

LastBallSpiralingToDeathLoop {
	file = global/ball_spiral_to_death.ogg
}


// Ball and Paddle Events ****************************************************

BallPaddleCollision1Event {
	file = global/ball_paddle_hit_01.wav
}
BallPaddleCollision2Event {
	file = global/ball_paddle_hit_02.wav
}
BallPaddleCollision3Event {
	file = global/ball_paddle_hit_03.wav
}
BallPaddleCollision4Event {
	file = global/ball_paddle_hit_04.wav
}

BallStickyPaddleCollisionEvent {
	file = global/ball_sticky_paddle_hit.ogg
}

BallShieldPaddleCollisionEvent {
	file =
}

BallOrPaddleGrowEvent {
	file = global/grow.ogg
}

BallOrPaddleShrinkEvent {
	file = global/shrink.ogg
}


// Ball and Block Events *****************************************************

BallBlockCollisionEvent {
	file = global/ball_block_hit.ogg
}

// TODO: Replace a single collision sound with multiple ones that go off in sequence (or random?)
// BallBlockBasicBounce1Event
// BallBlockBasicBounce2Event
// BallBlockBasicBounce3Event
// BallBlockBasicBounce4Event
// BallBlockBasicBounce5Event
// BallBlockBasicBounce6Event
// BallBlockBasicBounce7Event
// BallBlockBasicBounce8Event




// Block Events **************************************************************

// TODO: Have a set of sounds for when blocks that contribute to the score multiplier meter
// break... it increases in pitch with each block that gets broken...(see points section)

BombBlockDestroyedEvent {
	file = global/bomb_explode.ogg
}

InkBlockDestroyedEvent {
	file = global/ink_splat.ogg
}

BasicBlockDestroyedEvent {
	file = global/block_break_basic.ogg
}

CannonBlockLoadedEvent {
	file = global/cannon_loaded.ogg
}

CannonBlockFiredEvent {
	file = global/cannon_fired.ogg
}

// CannonBlockLoadedWithBallCamBallEvent

PortalTeleportEvent {
	file = global/portal_warp.ogg
}

CollateralBlockFlashingLoop {
	file = 
}

CollateralBlockFallingLoop {
	file = 
}

CannonBlockRotatingLoop {
	file = global/cannon_rotate.ogg
}

// TODO? Have a sound for when lightning is first activated
// and then make the lightning loop be a low hum of electricity

TeslaLightningArcLoop {
	file = global/electricity.ogg
}

SwitchBlockActivated {
	file = global/switch.wav
}

BlockFrozenEvent {
	file = global/frozen.wav
}

BlockOnFireLoop {
	file = global/on_fire.wav
}

IceShatterEvent {
	file = global/shatter.ogg
}

IceMeltedEvent {
	file =
}

// A block that was on fire is hit by the ice ball and the fire 'smokes-out' / gets cancelled by the ice
FireFrozeEvent {
	file =
}

// Projectile and Beam Events ************************************************

// TurretRocketFiredEvent
// BossRocketFiredEvent

PaddleRocketLaunchEvent {
	file =
}

PaddleRocketMovingLoop {
	file = global/rocket.ogg
}

RocketExplodedEvent {
	file = global/rocket_explode.ogg
}

// TurretMineFiredEvent
// PaddleMineFiredEvent

MineExplodedEvent {
	file = global/rocket_explode.ogg
}

LaserBulletShotEvent {
	file = 
}

LaserBeamFiringLoop {
	file = global/laser_beam.ogg
}

// LaserDeflectedByShieldEvent {
// }

// RocketOrMineDeflectedByShieldEvent {
// }



// Game Item Events **********************************************************

BallSafetyNetCreatedEvent {
	file = global/safety_net_created.ogg
}
BallSafetyNetDestroyedEvent {
	file = global/safety_net_destroyed.ogg
}

LevelFlipEvent {
	file = 
}
LevelUnflipEvent {
	file =
}

PaddleShieldActivatedEvent {
	file =
}
PaddleShieldDeactivatedEvent {
	file =
}

MagnetPaddleLoop {
	file = global/drone.ogg
}


ItemSpawnedEvent {
	file = global/item_spawn.ogg
}

PowerUpItemActivatedEvent {
	file = global/power_up_item.ogg
}

PowerNeutralItemActivatedEvent {
	file = global/power_neutral_item.ogg
}

PowerDownItemActivatedEvent {
	file = global/power_down_item.ogg
}

// TODO - hook not implemented yet
ItemTimerEndingLoop {
	file =
}
// TODO - hook not implemented yet
ItemTimerEndedEvent {
	file = 
}

// NOTE: This happens a lot in-game and probably shouldn't have a sound/loop associated with it
// but I'm leaving it just in case something works
ItemMovingLoop {
	file = 
}

// Boss-specific Events ******************************************************

// BossFadeInIntroEvent
// BossBackgroundLoop
// BossSparkleEvent
// BossGlowEvent
// BossPowerChargeEvent
// BossElectricitySpasmLoop
// BossMassiveShockwaveEvent
// BossHurtEvent
// BossAngryEvent
// BossBlowingUpLoop
// BossDeathFlashToFullscreenWhiteoutEvent

// ClassicalBossArmShakeLoop?
// ClassicalBossArmAttackEvent?



// Bullet-time / Ball Boost Events *******************************************

EnterBulletTimeEvent {
	file = global/BulletTimeFire.wav
}

InBulletTimeLoop {
	file = global/BulletTime.wav
}

ExitBulletTimeEvent {
	file = global/unwoosh.ogg
}

BallBoostEvent {
	file = global/boost.ogg
}

BallBoostGainedEvent {
	file = global/boost_acquired.ogg
}

// Star, points and life Events **********************************************

LifeUpAcquiredEvent {
	file = global/one_up.ogg
}

StarAcquiredEvent {
	file = global/star_gained.ogg
}

FiveStarsAcquiredEvent {
	file = global/star_gained.ogg
}

ScoreMultiplierIncreasedTo2Event {
	file = 
}

ScoreMultiplierIncreasedTo3Event {
	file = 
}

ScoreMultiplierIncreasedTo4Event {
	file = 
}

ScoreMultiplierLostEvent {
	file = multiplier_lost.ogg
}

// TODO... Make the sounds increase in pitch (or something) to indicate that good things are happening...
BlockBrokenMultiplierCounterInc1 {
	file =
}
BlockBrokenMultiplierCounterInc2 {
	file =
}
BlockBrokenMultiplierCounterInc3 {
	file =
}
BlockBrokenMultiplierCounterInc4 {
	file =
}
BlockBrokenMultiplierCounterInc5 {
	file =
}
BlockBrokenMultiplierCounterInc6 {
	file =
}
BlockBrokenMultiplierCounterInc7 {
	file =
}
BlockBrokenMultiplierCounterInc8 {
	file =
}
BlockBrokenMultiplierCounterInc9 {
	file =
}

// TODO: Event for when a secret is revealed?
//RevealEvent {
//	file =
//}

// ---------------------------------------------------------------------------
// Non-In-Game State Events ==================================================
// ---------------------------------------------------------------------------

// Level Start and End State Events ******************************************

// LevelStartPaddleMoveUpEvent
// LevelStartBallSpawnOnPaddleEvent
// LevelEndFadeoutEvent


// Level Summary State Events ************************************************

// LevelSummaryBackgroundLoop
// LevelSummaryPointTallyLoop
// LevelSummaryNewHighScoreEvent


// World Complete State Events ***********************************************

// WorldCompleteBackgroundLoop


// Game-over state events ****************************************************

GameOverEvent {
	file = global/game_over.ogg
}

// TODO

// ---------------------------------------------------------------------------
// Global Sound Effects ======================================================
// ---------------------------------------------------------------------------

BulletTimeEffect {
	type  = reverb3D
	volume = 0.75
	roomAtten = -1000
	roomHighFreqAtten = -100
	roomRolloff = 0
	decayTime = 1.49
	decayHighFreqRatio = 0.83
	reflectionAtten = -2602
	reflectionDelay = 0.007
	reverbAtten = 200
	reverbDelay = 0.011
	diffusion = 100
	density = 100
	highFreqReference = 5000
}

// TODO: Gargle effect sucks, change it
InkSplatterEffect {
	type = gargle
	volume = 1
	rate = 30
	isSinWave = 1
}

PoisonEffect {
	type = distortion
	volume = 0.8
	gain = -18
	intensity = 20.0
	postEQCenterFreq = 2400
	postEQBandwidth = 2400
	preLowpassCutoff = 8000
}

// PaddleCamStickyGooEffect {
// }

