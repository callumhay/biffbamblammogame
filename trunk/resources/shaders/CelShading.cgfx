/**
 * CelShading.cgfx
 * Author: Callum Hay
 * The following is a cel shader, it provides basic toon shading.
 */
 
 float Script : STANDARDSGLOBAL <
    string UIWidget = "none";
    string ScriptClass = "object";
    string ScriptOrder = "standard";
    string ScriptOutput = "color";
    string Script = "Technique=Basic;";
> = 0.8;

//// UN-TWEAKABLES - AUTOMATICALLY-TRACKED TRANSFORMS ////////////////

float4x4 WorldITXf : WorldInverseTranspose < string UIWidget="None"; >;
float4x4 WvpXf   : WorldViewProjection < string UIWidget="None"; >;
float4x4 WorldXf : World < string UIWidget="None"; >;
float4x4 ViewIXf : ViewInverse < string UIWidget="None"; >;

//// TWEAKABLE PARAMETERS ////////////////////

// Key Point Light ----------------------------------
float3 KeyPointLightPos : Position <
    string Object = "PointLight0";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 KeyPointLightColour : Specular <
    string UIName =  "Diffuse Light";
    string Object = "Pointlight0";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};
// --------------------------------------------------

// Fill Point Light ---------------------------------
float3 FillPointLightPos : Position <
    string Object = "PointLight1";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 FillPointLightColour : Specular <
    string UIName =  "Diffuse Light";
    string Object = "Pointlight1";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};

float FillPointLightLinearAtten <
    string UIName =  "Fill Light Linear Attenuation";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.001;
    string UIWidget = "Slider";
> = 1.0f;
// --------------------------------------------------

// Ball Point Light ---------------------------------
float3 BallPointLightPos : Position <
    string Object = "PointLight2";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 BallPointLightColour : Specular <
    string UIName =  "Diffuse Light";
    string Object = "Pointlight2";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};

float BallPointLightLinearAtten <
    string UIName =  "Ball Light Linear Attenuation";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.001;
    string UIWidget = "Slider";
> = 1.0f;
// --------------------------------------------------

float3 DiffuseColour <
    string UIName =  "Diffuse Colour";
    string UIWidget = "Color";
> = {0.40f,0.50f,1.00f};

float3 SpecularColour <
    string UIName =  "Specular Colour";
    string UIWidget = "Color";
> = {0.30f,0.30f,0.30f};

float Shininess <
    string UIWidget = "slider";
    float UIMin = 1.0;
    float UIMax = 128.0;
    float UIStep = 1.0;
    string UIName =  "Shininess";
> = 128.0;

float OutlineWidth <
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 10.0f;
    float UIStep = 0.1f;
    string UIName =  "Outline Width";
> = 1.5f;

//////// COLOR & TEXTURE /////////////////////
float3 OutlineColour <
    string UIName =  "Outline Colour";
    string UIWidget = "Color";
> = {0.00f,0.00f,0.00f};

texture ColourTexture  <
    string ResourceName = "default_color.dds";
    string UIName =  "Diffuse Texture";
    string ResourceType = "2D";
>;

sampler2D ColourSampler = sampler_state {
    Texture = <ColourTexture>;
};  
	
texture CelShadingProgression  <
    string ResourceName = "celshading_texture.jpg";
    string UIName =  "Cel Texture";
    string ResourceType = "1D";
>;

sampler1D CelShadingSampler = sampler_state {
    Texture = <CelShadingProgression>;
    MinFilter = Nearest;
    MagFilter = Nearest;
    WrapS = Clamp;
    WrapT = Clamp;
};  

//////// CONNECTOR DATA STRUCTURES ///////////

/* data from application vertex buffer */
struct appdata {
    float3 Position	: POSITION;
    float4 UV		: TEXCOORD0;
    float4 Normal	: NORMAL;
    float4 Colour   : COLOR0;
};

struct appdata_outlines {
    float3 Position	  : POSITION;
    float4 Normal	  : NORMAL;
};

/* data passed from vertex shader to pixel shader */
struct vertexOutput {
    float4 HPosition	   : POSITION;
    float2 UV		       : TEXCOORD0;
    float3 WorldPos        : TEXCOORD1;
    float3 WorldNormal     : TEXCOORD3;
    float3 WorldView	   : TEXCOORD4;
    float4 Colour          : TEXCOORD5;
};
 
struct vertexOutput_outlines {
    float4 HPosition	: POSITION;
};

///////// VERTEX SHADING /////////////////////

/*********** Generic Vertex Shader ******/

vertexOutput celshading_bg_VS(appdata IN) {
    vertexOutput OUT = (vertexOutput)0;
    OUT.WorldNormal = mul(WorldITXf,IN.Normal).xyz;

    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf,Po).xyz;
    OUT.WorldPos = Pw; //(KeyPointLightPos - Pw);
    OUT.UV = IN.UV.xy;
    
    float3 VertToViewVec = float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w) - Pw;
    OUT.WorldView = normalize(VertToViewVec);
    OUT.HPosition = mul(WvpXf,Po);
    OUT.Colour = IN.Colour;
    return OUT;
}

vertexOutput_outlines outline_VS(appdata_outlines IN) {
    vertexOutput_outlines OUT = (vertexOutput_outlines)0;
    OUT.HPosition = mul(WvpXf, float4(IN.Position, 1.0f));
    return OUT;
}


///////// PIXEL SHADING //////////////////////

// Utility function for cel shading
void CelShadingBG(float3 Nn, float3 WorldPos, float3 Vn,
		         out float3 DiffuseContrib,
		         out float3 SpecularContrib)
{
	float3 KeyLightVec  = KeyPointLightPos - WorldPos;
	float3 FillLightVec = FillPointLightPos - WorldPos;
	
	float3 KeyLn  = normalize(KeyLightVec);
	float3 FillLn = normalize(FillLightVec);
	
    float3 KeyHn = normalize(Vn + KeyLn);
    float3 KeyLitV = lit(dot(KeyLn,Nn),dot(KeyHn,Nn),Shininess).xyz;
    
	float3 FillHn = normalize(Vn + FillLn);
    float3 FillLitV = lit(dot(FillLn,Nn),dot(FillHn,Nn),Shininess).xyz;
	
	half FillLinearAtten = 1.0 / (FillPointLightLinearAtten * distance(FillPointLightPos, WorldPos));
	FillLinearAtten = clamp(FillLinearAtten, 0, 1);

    DiffuseContrib  = (tex1D(CelShadingSampler, KeyLitV.y).rrr * KeyPointLightColour) + FillLinearAtten * (tex1D(CelShadingSampler, FillLitV.y).rrr * FillPointLightColour);
    SpecularContrib = (KeyLitV.z * KeyPointLightColour) + FillLinearAtten * (FillLitV.z * FillPointLightColour);	
}

float4 celshading_textured_bg_PS(vertexOutput IN) : COLOR {
    float3 diffContrib;
    float3 specContrib;
    float3 Nn = normalize(IN.WorldNormal);
    
	CelShadingBG(Nn, IN.WorldPos, IN.WorldView, diffContrib, specContrib);
      
    float3 textureColour = tex2D(ColourSampler,IN.UV).rgb;
    float3 result = SpecularColour*specContrib + IN.Colour.rgb*DiffuseColour*textureColour*diffContrib;
    return float4(result, 1.0f);
}

float4 celshading_bg_PS(vertexOutput IN) : COLOR {
    float3 diffContrib;
    float3 specContrib;
    float3 Nn = normalize(IN.WorldNormal);
    
	CelShadingBG(Nn,IN.WorldPos,IN.WorldView,diffContrib,specContrib);
      
    float3 result = SpecularColour*specContrib + IN.Colour.rgb*DiffuseColour*diffContrib;
    return float4(result, 1.0f);
}

float4 outline_PS() : COLOR {
    return float4(OutlineColour.rgb, 1.0f);
}

///// TECHNIQUES /////////////////////////////
// Both techniques feature 2 passes: the first pass does the
// actual celshading (step-diffuse texture is used to give the celshading
// look; the second pass creates outlines.

technique BasicBG {
    pass p0 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        DepthTestEnable = true;
        DepthFunc = LEqual;
        CullFaceEnable = true;
        CullFace = Back;
        PolygonMode = int2(Front, Fill);
        
        VertexProgram = compile vp40 celshading_bg_VS();        
        FragmentProgram = compile fp40 celshading_bg_PS();
    }  
     
    pass p1 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        DepthTestEnable = true;
        DepthFunc = LEqual;
        CullFaceEnable = true;
        CullFace = Front;
        LineWidth = OutlineWidth;
        LineSmoothEnable = true;
        PolygonMode = int2(Back, Line);
        
        VertexProgram = compile vp40 outline_VS();
        FragmentProgram = compile fp40 outline_PS();
    }
}

technique TexturedBG {
    pass p0 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        DepthTestEnable = true;
        DepthFunc = LEqual;
        CullFaceEnable = true;
        CullFace = Back;
        PolygonMode = int2(Front, Fill);
        
        VertexProgram = compile vp40 celshading_bg_VS();        
        FragmentProgram = compile fp40 celshading_textured_bg_PS();
    }  
     
    pass p1 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        DepthTestEnable = true;
        DepthFunc = LEqual;
        CullFaceEnable = true;
        CullFace = Front;
        LineWidth = OutlineWidth;
        LineSmoothEnable = true;
        PolygonMode = int2(Back, Line);
        
        VertexProgram = compile vp40 outline_VS();
        FragmentProgram = compile fp40 outline_PS();
    }     
}
/////////////////////////////////////// eof //
