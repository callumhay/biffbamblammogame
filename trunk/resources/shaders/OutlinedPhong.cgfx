/**
 * OutlinedPhong.cgfx
 * Author: Callum Hay
 * The following is a basic phong shader with cel/toon-type
 * outlines. 
 */

float Script : STANDARDSGLOBAL <
    string UIWidget = "none";
    string ScriptClass = "object";
    string ScriptOrder = "standard";
    string ScriptOutput = "color";
    string Script = "Technique=Basic;";
> = 0.8;

//// UN-TWEAKABLES - AUTOMATICALLY-TRACKED TRANSFORMS ////////////////

float4x4 WorldITXf : WorldInverseTranspose < string UIWidget="None"; >;
float4x4 WvpXf   : WorldViewProjection < string UIWidget="None"; >;
float4x4 WorldXf : World < string UIWidget="None"; >;
float4x4 ViewIXf : ViewInverse < string UIWidget="None"; >;

//// TWEAKABLE PARAMETERS ////////////////////

// Scene light - only one light affects this shader,
// we don't care about its attenuation
float3 SceneLightPos : Position <
    string Object = "PointLight0";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 SceneLightColour : Specular <
    string UIName =  "Diffuse Light";
    string Object = "Pointlight0";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};

// The colour of the material
float3 DiffuseColour <
    string UIName =  "Diffuse Colour";
    string UIWidget = "Color";
> = {0.40f,0.50f,1.00f};

float3 SpecularColour <
    string UIName =  "Specular Colour";
    string UIWidget = "Color";
> = {0.30f,0.30f,0.30f};

// Specular exponent for the material
float Shininess <
    string UIWidget = "slider";
    float UIMin = 1.0;
    float UIMax = 128.0;
    float UIStep = 1.0;
    string UIName =  "Shininess";
> = 128.0;

//////// COLOR & TEXTURE /////////////////////

texture ColourTexture  <
    string ResourceName = "default_color.dds";
    string UIName =  "Diffuse Texture";
    string ResourceType = "2D";
>;

sampler2D ColourSampler = sampler_state {
    Texture = <ColourTexture>;
};   

//////// CONNECTOR DATA STRUCTURES ///////////

/* data from application vertex buffer */
struct appdata {
    float3 Position	: POSITION;
    float4 UV		: TEXCOORD0;
    float4 Normal	: NORMAL;
};

struct appdata_outlines {
    float3 Position	  : POSITION;
    float4 Normal	    : NORMAL;
};

/* data passed from vertex shader to pixel shader */
struct vertexOutput {
    float4 HPosition	  : POSITION;
    float2 UV		        : TEXCOORD0;
    float3 LightVec	    : TEXCOORD1;
    float3 WorldNormal	: TEXCOORD2;
    float3 WorldView	  : TEXCOORD3;
};
 
struct vertexOutput_outlines {
    float4 HPosition	: POSITION;
};

///////// VERTEX SHADING /////////////////////

/*********** Generic Vertex Shader ******/

vertexOutput phongshading_VS(appdata IN) {
    vertexOutput OUT = (vertexOutput)0;
    OUT.WorldNormal = mul(WorldITXf,IN.Normal).xyz;

    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf,Po).xyz;
    OUT.LightVec = (SceneLightPos - Pw);
    OUT.UV = IN.UV.xy;
    
    float3 VertToViewVec = float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w) - Pw;
    OUT.WorldView = normalize(VertToViewVec);
    OUT.HPosition = mul(WvpXf,Po);
    return OUT;
}

vertexOutput_outlines outline_VS(appdata_outlines IN) {
    vertexOutput_outlines OUT = (vertexOutput_outlines)0;
    OUT.HPosition = mul(WvpXf, float4(IN.Position, 1.0f));
    return OUT;
}


///////// PIXEL SHADING //////////////////////

// Utility function for phong shading
void phong_shading(float3 Nn,
		    float3 Ln,
		    float3 Vn,
		    out float3 DiffuseContrib,
		    out float3 SpecularContrib)
{
    float3 Hn = normalize(Vn + Ln);
    float4 litV = lit(dot(Ln,Nn),dot(Hn,Nn),Shininess);
    
    DiffuseContrib = litV.y * SceneLightColour;
    SpecularContrib = litV.y * litV.z * SceneLightColour;
}

float4 phongshading_textured_PS(vertexOutput IN) : COLOR {
    float3 diffContrib;
    float3 specContrib;
    float3 Ln = normalize(IN.LightVec);
    float3 Vn = normalize(IN.WorldView);
    float3 Nn = normalize(IN.WorldNormal);
	  
    phong_shading(Nn,Ln,Vn,diffContrib,specContrib);
    
    float3 textureColour = tex2D(ColourSampler,IN.UV).rgb;
    float3 result = SpecularColour*specContrib + DiffuseColour*textureColour*diffContrib;
    return float4(result,1);
}

float4 phongshading_PS(vertexOutput IN) : COLOR {
    float3 diffContrib;
    float3 specContrib;
    float3 Ln = normalize(IN.LightVec);
    float3 Vn = normalize(IN.WorldView);
    float3 Nn = normalize(IN.WorldNormal);
    
	  phong_shading(Nn,Ln,Vn,diffContrib,specContrib);
    
    float3 result = SpecularColour*specContrib + DiffuseColour*diffContrib;
    return float4(result,1);
}

float4 outline_PS() : COLOR {
    return float4(OutlineColour.rgb, 1.0f);
}

///// TECHNIQUES /////////////////////////////
// Both techniques feature 2 passes: the first pass does the
// actual celshading (step-diffuse texture is used to give the celshading
// look; the second pass creates outlines.

technique Basic {

    pass p0 < string Script = "Draw=geometry;"; > {
        DepthTestEnable = true;
        DepthFunc = Less;
        CullFaceEnable = true;
        CullFace = Back;
        
        VertexProgram = compile vp40 phongshading_VS();        
        FragmentProgram = compile fp40 phongshading_PS();
    }
}

technique Textured {

    pass p0 < string Script = "Draw=geometry;"; > {
        DepthTestEnable = true;
        DepthFunc = Less;
        CullFaceEnable = true;
        CullFace = Back;
        
        VertexProgram = compile vp40 phongshading_VS();        
        FragmentProgram = compile fp40 phongshading_textured_PS();
    }  
}
/////////////////////////////////////// eof //
