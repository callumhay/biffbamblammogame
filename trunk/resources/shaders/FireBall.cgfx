float Script : STANDARDSGLOBAL <
    string UIWidget = "none";
    string ScriptClass = "object";
    string ScriptOrder = "standard";
    string ScriptOutput = "color";
    string Script = "Technique=Main;";
> = 0.8;

//// UN-TWEAKABLES - AUTOMATICALLY-TRACKED TRANSFORMS ////////////////

float4x4 WvpXf     : WorldViewProjection < string UIWidget="None"; >;
float4x4 WorldXf   : World < string UIWidget="None"; >;

//// TWEAKABLE PARAMETERS ////////////////////

float Timer : TIME <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 4.0;
    float UIStep = 0.01;
    string UIName =  "Timer";
> = 0;

float Scale <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 4.0;
    float UIStep = 0.1;
    string UIName =  "Scale";
> = 1;

float Freq <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 10.0;
    float UIStep = 0.1;
    string UIName =  "Frequency";
> = 1;

float AlphaMultiplier <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName =  "Alpha Multiplier";
> = 0;

float3 FlowDir <
    string UIName = "Flow Direction";
> = {0, 1, 1};


//////// COLOR & TEXTURE /////////////////////

texture NoiseTexture  <
    string ResourceName = "noiseL8_32x32x32.dds";
    string UIName =  "Noise Texture";
    string ResourceType = "3D";
>;

sampler3D NoiseSampler = sampler_state {
    Texture = <NoiseTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
    WrapR = Repeat;
    
};  


//////// CONNECTOR DATA STRUCTURES ///////////

/* data from application vertex buffer */
struct appdata {
    float3 Position	: POSITION;
};

/* data passed from vertex shader to pixel shader */
struct vertexOutput {
    float4 HPosition	: POSITION;
    float3 WorldPos	    : TEXCOORD0;
};
 
///////// VERTEX SHADING /////////////////////

/*********** Generic Vertex Shader ******/

vertexOutput localpos_VS(appdata IN) {
    vertexOutput OUT = (vertexOutput)0;
    
    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf,Po).xyz;

    OUT.WorldPos  = Po.xyz;
    OUT.HPosition = mul(WvpXf,Po);
    return OUT;
}

///////// PIXEL SHADING //////////////////////

float4 firey_sprite_PS(vertexOutput IN) : COLOR {
    float3 sampleCoord = IN.WorldPos.xyz + Freq*Timer*FlowDir;
    
    float4 texVal = tex3D(NoiseSampler, Scale * sampleCoord);
    float totalTexVal = 8.0 * (abs(texVal.x - 0.25)  + abs(texVal.y - 0.125) + 
                               abs(texVal.z - 0.0625) + abs(texVal.w - 0.03125));
	totalTexVal = clamp(totalTexVal, 0, 1);
	float alpha = lerp(0.2f, 1.0f, totalTexVal) * AlphaMultiplier;
	float3 fireColour = lerp(float3(1.0f, 0.0f, 0.0f), float3(1.0f, 1.0f, 0.0f), totalTexVal.x);             

    // return as float4
    return float4(fireColour.xyz, alpha);
}

///// TECHNIQUES /////////////////////////////

technique FireBall < string Script = "Pass=p0;"; > {

    pass p0 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha);
		BlendEquation = FuncAdd;
            
        PolygonMode = int2(Front, Fill);
        DepthTestEnable = true;
        DepthFunc = LEqual;
		DepthMask = false;
		CullFaceEnable = true;

        VertexProgram = compile arbvp1 localpos_VS();            
        FragmentProgram = compile arbfp1 firey_sprite_PS();
    }
}

/////////////////////////////////////// eof //
