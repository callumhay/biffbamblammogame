/*********************************************************************
Skybox.cgfx
Created by: Callum Hay
The following is a skybox shader for use with a cubemap to ensure that
whenever the user looks at this material they see the right place on
the cube map (skybox).
**********************************************************************/

float4x4 ModelViewProjXf;
float4x4 WorldXf;
float3 SkyCamPos;

texture skyEnvMap : Environment <
	string ResourceType = "Cube";
>;

samplerCUBE SkyboxSampler = sampler_state {
	Texture = <skyEnvMap>;
	WrapS = ClampToEdge;
	WrapT = ClampToEdge;
};


// application to vertex shader ------------------------------------------
struct appdata {
    float3 Position	: POSITION;
};

// vertex shader to pixel shader -----------------------------------------
struct vertexOutput {
    float4 HPosition    : POSITION;
    float3 WorldView    : TEXCOORD0;
};


// Vertex Shader ---------------------------------------------------------
vertexOutput skybox_VS(appdata IN) {
    vertexOutput OUT = (vertexOutput)0;
    
    float4 Pos = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf,Pos).xyz;
    OUT.HPosition = mul(ModelViewProjXf,Pos);
    OUT.WorldView = normalize(Pw - float3(SkyCamPos.x,SkyCamPos.y,SkyCamPos.z));
    return OUT;
}


// Fragement Shader (Floating Point) --------------------------------------
float4 skybox_PS(vertexOutput IN) : COLOR {
    // All we need to do is a look up in the cube map
    // using the vector from the eye to the fragment...
     float4 SkyColour = texCUBE(SkyboxSampler, IN.WorldView);
     return SkyColour;
}

technique Skybox
{
    pass pass0
    {    
        CullFaceEnable = true;
        CullFace = Back;
        DepthTestEnable = true;  
        DepthFunc = LEqual;
    
        VertexProgram = compile vp40 skybox_VS();
        FragmentProgram = compile fp40 skybox_PS();
    }
}

