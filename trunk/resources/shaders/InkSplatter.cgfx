float Timer : TIME <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 4.0;
    float UIStep = 0.01;
    string UIName =  "Timer";
> = 0;

float Scale <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 2.0;
    float UIStep = 0.01;
    string UIName =  "Scale";
> = 1;

float Freq <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 2.0;
    float UIStep = 0.01;
    string UIName =  "Frequency";
> = 1;

float Displacement <
	string UIWidget = "slider";
	string UIName =  "Displacement";
	float UIMin = 0.0;
	float UIMax = 1.0;
	float UIStep = 0.001;
> = 0.15f;

float Fade <
	string UIWidget = "slider";
	string UIName =  "Fade";
	float UIMin = 0.0;
	float UIMax = 1.0;
	float UIStep = 0.001;
> = 0.0f;

float3 InkColour <
    string UIName =  "Ink Colour";
    string UIWidget = "Color";
> = {0.111f, 0.137f, 0.289f};

texture NoiseTexture  <
    string ResourceName = "noiseL8_32x32x32.dds";
    string UIName =  "Noise Texture";
    string ResourceType = "3D";
>;

sampler3D NoiseSampler = sampler_state {
    Texture = <NoiseTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
    WrapR = Repeat;
};  

texture InkSplatterTex <
    string ResourceName = "ink_splatter_1024x512.png";
    string UIName = "Scene Texture";
    string ResourceType = "2D";
>;

sampler2D InkSplatterSampler = sampler_state {
	Texture = <InkSplatterTex>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
	WrapS = Clamp;
	WrapT = Clamp;
};

texture SceneTex <
    string ResourceName = "lasers.jpg";
    string UIName = "Scene Texture";
    string ResourceType = "2D";
>;

sampler2D SceneSampler = sampler_state {
	Texture = <SceneTex>;	
	WrapS = Clamp;
	WrapT = Clamp;
    MinFilter = Nearest;
    MagFilter = Nearest;	
};

float4 ink_splatter_PS(float2 UV : TEXCOORD0) : COLOR {
	float4 splatterColour = tex2D(InkSplatterSampler, UV);
	float3 sceneColour    = tex2D(SceneSampler, UV).rgb;
	float4 noise          = tex3D(NoiseSampler, Scale * float3(UV.xy, Freq * Timer));
	
	float fadeDisplacement = Displacement * Fade;
	float lerpAmt = splatterColour.a * Fade;
	
	// Make sure the noise value is in the range [-1,1]
	float noiseVal = clamp((noise.z - 0.05f) * 5.0f, 0, 1);
	noiseVal = (noiseVal * 2.0f) - 1.0f;
	
	// Calculate the distortion of the ink
	float3 distortedSceneColour = InkColour * tex2D(SceneSampler, UV + fadeDisplacement*float2(noiseVal)).rgb;
	
	// Interpolate between the scene and the ink based on the splatter mask texture
	return float4(lerp(sceneColour, distortedSceneColour, lerpAmt), 1);
}

technique InkSplatter <string Script = "Pass=p0;";> {
    pass p0 <string Script = "Draw=geometry;";> {
    	FragmentProgram = compile arbfp1 ink_splatter_PS();
    }
}
