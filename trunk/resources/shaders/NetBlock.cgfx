/**
 * NetBlock.cgfx
 * Author: Callum Hay
 */

float Script : STANDARDSGLOBAL <
    string UIWidget = "none";
    string ScriptClass = "object";
    string ScriptOrder = "standard";
    string ScriptOutput = "color";
    string Script = "Technique=Basic;";
> = 0.8;

//// UN-TWEAKABLES - AUTOMATICALLY-TRACKED TRANSFORMS ////////////////

float4x4 WorldITXf : WorldInverseTranspose < string UIWidget="None"; >;
float4x4 WvpXf   : WorldViewProjection < string UIWidget="None"; >;
float4x4 WorldXf : World < string UIWidget="None"; >;
float4x4 ViewIXf : ViewInverse < string UIWidget="None"; >;

//// TWEAKABLE PARAMETERS ////////////////////

// Lights affecting this shader:
// For the background technique - only two lights affect the
// shader: key and fill
// For the foreground technique - three lights affect the shader:
// key, fill and ball

// Key Point Light ----------------------------------
float3 KeyPointLightPos : Position <
    string Object = "PointLight0";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 KeyPointLightColour : Specular <
    string UIName =  "Diffuse Light";
    string Object = "Pointlight0";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};
// --------------------------------------------------

// Fill Point Light ---------------------------------
float3 FillPointLightPos : Position <
    string Object = "PointLight1";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 FillPointLightColour : Specular <
    string UIName =  "Diffuse Light";
    string Object = "Pointlight1";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};

float FillPointLightLinearAtten <
    string UIName =  "Fill Light Linear Attenuation";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.001;
    string UIWidget = "Slider";
> = 1.0f;
// --------------------------------------------------

// Ball Point Light ---------------------------------
float3 BallPointLightPos : Position <
    string Object = "PointLight2";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 BallPointLightDiffuse : Specular <
    string UIName =  "Diffuse Light";
    string Object = "Pointlight2";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};

float BallPointLightLinearAtten <
    string UIName =  "Ball Light Linear Attenuation";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.001;
    string UIWidget = "Slider";
> = 1.0f;
// --------------------------------------------------

// The colour of the material
float3 DiffuseColour <
    string UIName =  "Diffuse Colour";
    string UIWidget = "Color";
> = {0.40f,0.50f,1.00f};

float3 SpecularColour <
    string UIName =  "Specular Colour";
    string UIWidget = "Color";
> = {0.30f,0.30f,0.30f};

// Specular exponent for the material
float Shininess <
    string UIWidget = "slider";
    float UIMin = 1.0;
    float UIMax = 128.0;
    float UIStep = 1.0;
    string UIName =  "Shininess";
> = 128.0;

texture ColourTexture  <
    string ResourceName = "default_color.dds";
    string UIName =  "Diffuse Texture";
    string ResourceType = "2D";
>;

sampler2D ColourSampler = sampler_state {
    Texture = <ColourTexture>;
};   

//////// CONNECTOR DATA STRUCTURES ///////////

/* data from application vertex buffer */
struct appdata {
    float3 Position	: POSITION;
    float4 UV		: TEXCOORD0;
    float4 Normal	: NORMAL;
    //float4 Colour	: COLOR0;
};

struct appdata_outlines {
    float3 Position	  : POSITION;
    float4 Colour	  : COLOR0;
};

/* data passed from vertex shader to pixel shader */
struct vertexOutput {
    float4 HPosition	: POSITION;
    float2 UV		    : TEXCOORD0;
    float3 WorldPos     : TEXCOORD1;
    float3 WorldNormal	: TEXCOORD2;
    float3 WorldView	: TEXCOORD3;
    float4 Colour	    : TEXCOORD4;
};
 
struct vertexOutput_outlines {
    float4 HPosition	: POSITION;
    float Alpha		: TEXCOORD0;
};

///////// VERTEX SHADING /////////////////////

/*********** Generic Vertex Shader ******/

vertexOutput netblock_VS(appdata IN) {
    vertexOutput OUT = (vertexOutput)0;
    OUT.WorldNormal = mul(WorldITXf,IN.Normal).xyz;

    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf,Po).xyz;
    OUT.WorldPos = Pw;
	OUT.UV = IN.UV.xy;
    
    float3 VertToViewVec = float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w) - Pw;
    OUT.WorldView = normalize(VertToViewVec);
    OUT.HPosition = mul(WvpXf,Po);
    //OUT.Colour = IN.Colour;
    return OUT;
}

///////// PIXEL SHADING //////////////////////

// Utility function for phong shading
void PhongShadingBG(float3 Nn,
			float3 WorldPos,
		    float3 Vn,
		    out float3 DiffuseContrib,
		    out float3 SpecularContrib)
{
	float3 KeyLightVec  = KeyPointLightPos - WorldPos;
	float3 FillLightVec = FillPointLightPos - WorldPos;
	
	float3 KeyLn  = normalize(KeyLightVec);
	float3 FillLn = normalize(FillLightVec);
	
    float3 KeyHn = normalize(Vn + KeyLn);
    float3 KeyLitV = lit(dot(KeyLn,Nn),dot(KeyHn,Nn),Shininess).xyz;
    
	float3 FillHn = normalize(Vn + FillLn);
    float3 FillLitV = lit(dot(FillLn,Nn),dot(FillHn,Nn),Shininess).xyz;
	
	float FillLinearAtten = clamp(1.0f / (FillPointLightLinearAtten * distance(FillPointLightPos, WorldPos)), 0, 1);
	FillLinearAtten = clamp(FillLinearAtten, 0, 1);
	
    DiffuseContrib  = (KeyLitV.y * KeyPointLightColour) + FillLinearAtten * (FillLitV.y * FillPointLightColour);
    SpecularContrib = (KeyLitV.z * KeyPointLightColour) + FillLinearAtten * (FillLitV.z * FillPointLightColour);
}

// Same as Background shading but with one more light source (ball)
void PhongShadingFG(float3 Nn,
			float3 WorldPos,
		    float3 Vn,
		    out float3 DiffuseContrib,
		    out float3 SpecularContrib)
{
	PhongShadingBG(Nn, WorldPos, Vn, DiffuseContrib, SpecularContrib);
	
	float3 BallLn = normalize(BallPointLightPos - WorldPos);
	float3 BallHn = normalize(Vn + BallLn);
	float3 BallLitV = lit(dot(BallLn,Nn), dot(BallHn,Nn), Shininess).xyz;
	
	float BallLinearAtten =  clamp(1.0f / (BallPointLightLinearAtten * distance(BallPointLightPos, WorldPos)), 0, 1);
	
	DiffuseContrib  += BallLinearAtten * (BallLitV.y * BallPointLightDiffuse);
	SpecularContrib += BallLinearAtten * (BallLitV.z * BallPointLightDiffuse);	
}


float4 netblock_textured_fg_PS(vertexOutput IN) : COLOR {
    float3 diffContrib;
    float3 specContrib;
    float3 Vn = normalize(IN.WorldView);
    float3 Nn = normalize(IN.WorldNormal);
	  
    PhongShadingFG(Nn,IN.WorldPos,Vn,diffContrib,specContrib);
    
    float4 textureColour = tex2D(ColourSampler,0.7*IN.UV).rgba;
    float3 result = SpecularColour*specContrib + DiffuseColour*textureColour.rgb*diffContrib;
    return float4(result, textureColour.a);//IN.Colour.a);
}

technique NetBlock {

    pass p0 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha); 
        DepthTestEnable = true;
        DepthFunc = LEqual;
        CullFaceEnable = true;
        CullFace = Front;
        PolygonMode = int2(Back, Fill);
        
        VertexProgram = compile arbvp1 netblock_VS();        
        FragmentProgram = compile arbfp1 netblock_textured_fg_PS();
    }
	
	pass p1 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha); 
        DepthTestEnable = true;
        DepthFunc = LEqual;
        CullFaceEnable = true;
        CullFace = Back;
		PolygonSmoothEnable = true;
        PolygonMode = int2(Front, Fill);
        
        VertexProgram = compile arbvp1 netblock_VS();        
        FragmentProgram = compile arbfp1 netblock_textured_fg_PS();
    } 	
	
}
