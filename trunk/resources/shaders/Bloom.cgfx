float HighlightThreshold <
    string UIName = "Highlight Threshold";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 1.0f;
    float UIStep = 0.1f;
> = 0.9f;

float SceneIntensity <
    string UIName = "Scene Intensity";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 2.0f;
    float UIStep = 0.1f;
> = 0.5f;

float GlowIntensity <
    string UIName = "Glow Intensity";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 2.0f;
    float UIStep = 0.1f;
> = 0.5f;

float HighlightIntensity <
    string UIName = "Highlight intensity";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 10.0f;
    float UIStep = 0.1f;
> = 0.5f;

float SceneWidth <
    string UIWidget = "slider";
    float UIMin = 1;
    float UIMax = 1680;
    float UIStep = 1;
    string UIName =  "Width";
> = 1024.0f;

float SceneHeight <
    string UIWidget = "slider";
    float UIMin = 1;
    float UIMax = 1050;
    float UIStep = 1;
    string UIName =  "Height";
> = 768.0f;

texture SceneTex <
    string ResourceName = "lasers.jpg";
    string UIName = "Scene Texture";
    string ResourceType = "2D";
>;
sampler2D SceneSampler = sampler_state {
	Texture = <SceneTex>;	
	WrapS = Clamp;
	WrapT = Clamp;
};

// Downsample blur images
texture BrightDownsampleTex <
    string ResourceName = "lasers.jpg";
    string UIName = "Bright Downsample Texture";
    string ResourceType = "2D";
>;
sampler2D BrightDownsampleLvl2Sampler = sampler_state {
	Texture = <BrightDownsampleTex>;	
	WrapS = Clamp;
	WrapT = Clamp;
	MinMipLevel = 2;
	MaxMipLevel = 2;
};
sampler2D BrightDownsampleLvl3Sampler = sampler_state {
	Texture = <BrightDownsampleTex>;	
	WrapS = Clamp;
	WrapT = Clamp;
	MinMipLevel = 3;
	MaxMipLevel = 3;
};
sampler2D BrightDownsampleLvl4Sampler = sampler_state {
	Texture = <BrightDownsampleTex>;	
	WrapS = Clamp;
	WrapT = Clamp;
	MinMipLevel = 4;
	MaxMipLevel = 4;
};

// Composite blur images for the final composition of the bloom
sampler2D BrightCompositeLvl2Sampler = sampler_state {
	Texture = <BrightDownsampleTex>;	
	WrapS = Clamp;
	WrapT = Clamp;
};
sampler2D BrightCompositeLvl3Sampler = sampler_state {
	Texture = <BrightDownsampleTex>;	
	WrapS = Clamp;
	WrapT = Clamp;
};
sampler2D BrightCompositeLvl4Sampler = sampler_state {
	Texture = <BrightDownsampleTex>;	
	WrapS = Clamp;
	WrapT = Clamp;
};

const half Blur7x7Weights[7] = {
	0.05,
	0.1,
	0.2,
	0.3,
	0.2,
	0.1,
	0.05,
};

half luminance(half3 c) {
	return dot(c, float3(0.3, 0.59, 0.11));
}

// this function should be baked into a texture lookup for performance
half filter_highlights(half3 c, uniform float threshold) {
	return smoothstep(threshold, 1.0, luminance(c.rgb));
}

half4 bloomfilter_PS(float2 UV : TEXCOORD0) : COLOR {
	half3 sampleColour = tex2D(SceneSampler, UV).rgb;
	return half4(sampleColour, filter_highlights(sampleColour, HighlightThreshold));
}

half4 blur7x7_rows_PS(float2 UV : TEXCOORD0, uniform sampler2D BloomSampler) : COLOR {
	half tapUV = 1.0f / SceneHeight;
	half4 total = Blur7x7Weights[3] * tex2D(BloomSampler, UV);
	total += Blur7x7Weights[2] * tex2D(BloomSampler, UV + half2(tapUV, 0));
	total += Blur7x7Weights[4] * tex2D(BloomSampler, UV + half2(-tapUV, 0));
	total += Blur7x7Weights[1] * tex2D(BloomSampler, UV + half2(2*tapUV, 0));
	total += Blur7x7Weights[5] * tex2D(BloomSampler, UV + half2(-2*tapUV, 0));
	total += Blur7x7Weights[0] * tex2D(BloomSampler, UV + half2(3*tapUV, 0));
	total += Blur7x7Weights[6] * tex2D(BloomSampler, UV + half2(-3*tapUV, 0));
	return total;
}

half4 blur7x7_cols_PS(float2 UV : TEXCOORD0, uniform sampler2D BloomSampler) : COLOR {
	half tapUV = 1.0f / SceneHeight;
	half4 total = Blur7x7Weights[3] * tex2D(BloomSampler, UV);
	total += Blur7x7Weights[2] * tex2D(BloomSampler, UV + half2(0, tapUV));
	total += Blur7x7Weights[4] * tex2D(BloomSampler, UV + half2(0, -tapUV));
	total += Blur7x7Weights[1] * tex2D(BloomSampler, UV + half2(0, 2*tapUV));
	total += Blur7x7Weights[5] * tex2D(BloomSampler, UV + half2(0, -2*tapUV));
	total += Blur7x7Weights[0] * tex2D(BloomSampler, UV + half2(0, 3*tapUV));
	total += Blur7x7Weights[6] * tex2D(BloomSampler, UV + half2(0, -3*tapUV));
	return total;
}

float4 composite_bloom_PS(float2 UV : TEXCOORD0) : COLOR {   
	
	float4 origScene = tex2D(SceneSampler, UV);
	
	half4 blurLvl2 = tex2D(BrightCompositeLvl2Sampler, UV);
	half4 blurLvl3 = tex2D(BrightCompositeLvl3Sampler, UV);
	half4 blurLvl4 = tex2D(BrightCompositeLvl4Sampler, UV);
	
	half4 blurTotal = blurLvl2 + blurLvl3 + blurLvl4;
	
	return SceneIntensity*origScene + GlowIntensity*blurTotal + HighlightIntensity*blurTotal.a;
}  

technique BloomFilter {
    pass filter {
		BlendEnable = true;
		BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha); 
    	FragmentProgram = compile arbfp1 bloomfilter_PS();
    }
}

technique BrightDownsampleBlur2 {
	pass blurRows2 {
		FragmentProgram = compile arbfp1 blur7x7_rows_PS(BrightDownsampleLvl2Sampler);
	}
	pass blurCols2 {
		FragmentProgram = compile arbfp1 blur7x7_cols_PS(BrightDownsampleLvl2Sampler);  
	}	
}

technique BrightDownsampleBlur3 {
	pass blurRows3 {
		FragmentProgram = compile arbfp1 blur7x7_rows_PS(BrightDownsampleLvl3Sampler);
	}
	pass blurCols3 {
		FragmentProgram = compile arbfp1 blur7x7_cols_PS(BrightDownsampleLvl3Sampler);  
	}	
}

technique BrightDownsampleBlur4 {
	pass blurRows4 {
		FragmentProgram = compile arbfp1 blur7x7_rows_PS(BrightDownsampleLvl4Sampler);
	}
	pass blurCols4 {
		FragmentProgram = compile arbfp1 blur7x7_cols_PS(BrightDownsampleLvl4Sampler);  
	}
}

technique CompositeBloom {
	pass bloomComposite {
		FragmentProgram = compile arbfp1 composite_bloom_PS();  
	}
}