/**
 * PostRefract.cgfx
 * Author: Callum Hay
 * The following is a post-processing effect that will take a given
 * geometry and, using its normals, distort the given rendered scene 
 * quad in the area where that mesh would normally be rendered -
 * the effect of this is a kind of 'cloaking/invisiblity' of the mesh.
 */

float Script : STANDARDSGLOBAL <
    string UIWidget = "none";
    string ScriptClass = "object";
    string ScriptOrder = "standard";
    string ScriptOutput = "color";
    string Script = "Technique=Basic;";
> = 0.8;

//// UN-TWEAKABLES - AUTOMATICALLY-TRACKED TRANSFORMS ////////////////

float4x4 WorldITXf : WorldInverseTranspose < string UIWidget="None"; >;
float4x4 WvpXf     : WorldViewProjection < string UIWidget="None"; >;
float4x4 WorldXf   : World < string UIWidget="None"; >;
float4x4 ViewIXf   : ViewInverse < string UIWidget="None"; >;
float4x4 ViewProjXf    : ViewProjection < string UIWidget="None"; >;

//// TWEAKABLE PARAMETERS ////////////////////
float WarpAmount <
    string UIWidget = "slider";
    float UIMin = 1;
    float UIMax = 1000;
    float UIStep = 1;
    string UIName =  "Warp Amount";
> = 1.0f;

float SceneWidth <
    string UIWidget = "slider";
    float UIMin = 1;
    float UIMax = 1680;
    float UIStep = 1;
    string UIName =  "Width";
> = 1083.0f;

float SceneHeight <
    string UIWidget = "slider";
    float UIMin = 1;
    float UIMax = 1050;
    float UIStep = 1;
    string UIName =  "Height";
> = 852.0f;

float IndexOfRefraction <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 3.0;
    float UIStep = 0.01;
    string UIName =  "Index of Refraction";  
> = 1.33f;

// The colour of the material
float3 InvisiColour <
    string UIName =  "Invisi Colour";
    string UIWidget = "Color";
> = {1.00f, 1.00f, 1.00f};

//////// TEXTURE /////////////////////

texture SceneTexture <
    string ResourceName = "scene_background_test.jpg";
    string UIName =  "Scene Texture";
    string ResourceType = "2D";
>;

sampler2D SceneSampler = sampler_state {
    Texture = <SceneTexture>;
    WrapS = ClampToEdge;
    WrapT = ClampToEdge;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
};   


//////// CONNECTOR DATA STRUCTURES ///////////

/* data from application vertex buffer */
struct appdata {
    float3 Position	: POSITION;
    float4 UV		     : TEXCOORD0;
    float4 Normal	  : NORMAL;
};

/* data passed from vertex shader to pixel shader */
struct vertexOutput {
    float4 HPosition    : POSITION;
    float3 WorldNormal   : TEXCOORD0;
    float3 ProjPos      : TEXCOORD1;
    float3 WorldView     : TEXCOORD2;
};
 
///////// VERTEX SHADING /////////////////////

vertexOutput PostRefract_VS(appdata IN) {
    vertexOutput OUT = (vertexOutput)0;
    
    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf,Po).xyz;
    
    float3 worldNormal = mul(WorldITXf,IN.Normal).xyz;
    float3 viewToVert  = Pw - float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w);
    
    OUT.WorldNormal = normalize(worldNormal);
    OUT.WorldView   = normalize(viewToVert);
    
    float4 outPos  = mul(WvpXf,Po);
    OUT.HPosition  = outPos;
    OUT.ProjPos    = outPos.xyz / outPos.w;   
    
    return OUT;
}

///////// PIXEL SHADING //////////////////////

float4 PostRefract_PS(vertexOutput IN) : COLOR {
    float3 nWorldView     = normalize(IN.WorldView.xyz);
    float3 nWorldNormal   = normalize(IN.WorldNormal.xyz);
    float3 nProjPos      = (IN.ProjPos.xyz + float3(1,1,1)) * 0.5;
    
    // Find the world space refraction vector
    float3 refractionVec = refract(nWorldView, nWorldNormal, IndexOfRefraction);

    // Use the refraction and scale it to the screen size to get an offset for looking
    // up the texel in the scene texture
    float2 lookupOffset = WarpAmount * refractionVec.xy * float2(1.0/SceneWidth, 1.0/SceneHeight);
    float3 textureColour = tex2D(SceneSampler, nProjPos.xy + lookupOffset).rgb;
 
    return float4(InvisiColour*textureColour, 1.0f);
    //return float4(nProjPos, 1);
}


///// TECHNIQUES /////////////////////////////

technique PostRefractGeom {

    pass p0 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        DepthTestEnable = true;
        DepthFunc = LEqual;
        CullFaceEnable = true;
        CullFace = Back;
        PolygonMode = int2(Front, Fill);
        
        VertexProgram = compile vp40 PostRefract_VS();        
        FragmentProgram = compile fp40 PostRefract_PS();
    }  
}
/////////////////////////////////////// eof //
