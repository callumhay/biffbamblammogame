
 float Script : STANDARDSGLOBAL <
    string UIWidget = "none";
    string ScriptClass = "object";
    string ScriptOrder = "standard";
    string ScriptOutput = "color";
    string Script = "Technique=Basic;";
> = 0.8;

//// UN-TWEAKABLES - AUTOMATICALLY-TRACKED TRANSFORMS ////////////////

float4x4 WorldITXf : WorldInverseTranspose < string UIWidget="None"; >;
float4x4 WvpXf   : WorldViewProjection < string UIWidget="None"; >;
float4x4 WorldXf : World < string UIWidget="None"; >;
float4x4 ViewIXf : ViewInverse < string UIWidget="None"; >;

//// TWEAKABLE PARAMETERS ////////////////////

// Key Point Light ----------------------------------
float3 KeyPointLightPos : Position <
    string Object = "PointLight0";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 KeyPointLightColour : Specular <
    string UIName =  "Diffuse Light";
    string Object = "PointLight0";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};

float KeyPointLightLinearAtten <
    string UIName =  "Key Light Linear Attenuation";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.001;
    string UIWidget = "Slider";
> = 0.001f;

// --------------------------------------------------

// Fill Point Light ---------------------------------
float3 FillPointLightPos : Position <
    string Object = "PointLight1";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 FillPointLightColour : Specular <
    string UIName =  "Diffuse Light";
    string Object = "PointLight1";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};

float FillPointLightLinearAtten <
    string UIName =  "Fill Light Linear Attenuation";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.001;
    string UIWidget = "Slider";
> = 0.001f;
// --------------------------------------------------

// Ball Point Light ---------------------------------
float3 BallPointLightPos : Position <
    string Object = "PointLight2";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 BallPointLightDiffuse : Specular <
    string UIName =  "Diffuse Light";
    string Object = "PointLight2";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};

float BallPointLightLinearAtten <
    string UIName =  "Ball Light Linear Attenuation";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.001;
    string UIWidget = "Slider";
> = 1.0f;
// --------------------------------------------------

float3 DiffuseColour <
    string UIName =  "Diffuse Colour";
    string UIWidget = "Color";
> = {0.40f,0.50f,1.00f};

float3 SpecularColour <
    string UIName =  "Specular Colour";
    string UIWidget = "Color";
> = {0.30f,0.30f,0.30f};

float Shininess <
    string UIWidget = "slider";
    float UIMin = 1.0;
    float UIMax = 128.0;
    float UIStep = 1.0;
    string UIName =  "Shininess";
> = 128.0;

float AlphaMultiplier <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName =  "AlphaMultiplier";
> = 1.0;

float FogMultiplierConstant <
    string UIWidget = "slider";
    float UIMin = 0.1f;
    float UIMax = 10.0f;
    float UIStep = 0.1f;
    string UIName =  "Fog Multiplier Constant";
> = 1.0f;

float FogDensity <
    string UIWidget = "slider";
    float UIMin = 0.1f;
    float UIMax = 10.0f;
    float UIStep = 0.1f;
    string UIName =  "Fog Density";
> = 1.0f;

float3 FogColour <
	string UIWidget = "color";
    string UIName = "Fog Colour";
> = {1, 1, 1};

//////// COLOR & TEXTURE ///////////////////// 
texture CelShadingProgression  <
    string ResourceName = "celshading_texture.jpg";
    string UIName =  "Cel Texture";
    string ResourceType = "1D";
>;

sampler1D CelShadingSampler = sampler_state {
    Texture = <CelShadingProgression>;
    MinFilter = Nearest;
    MagFilter = Nearest;
    WrapS = Clamp;
    WrapT = Clamp;
};  

//////// CONNECTOR DATA STRUCTURES ///////////

/* data from application vertex buffer */
struct appdata {
    float3 Position : POSITION;
    float4 Normal   : NORMAL;
    float4 Colour   : COLOR0;
};

/* data passed from vertex shader to pixel shader */
struct vertexFogOutput {    
	float4 HPosition   : POSITION;
	float3 WorldPos    : TEXCOORD1;
	float3 EyePos      : TEXCOORD2;
	float3 EyeToPosVec : TEXCOORD3;
    float3 WorldNormal : TEXCOORD4;
    float3 WorldView   : TEXCOORD5;
    float4 Colour      : TEXCOORD6;
};

///////// VERTEX SHADING /////////////////////

vertexFogOutput celshading_fog_VS(appdata IN) {
    vertexFogOutput OUT = (vertexFogOutput)0;
    OUT.WorldNormal = mul(WorldITXf,IN.Normal).xyz;

    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf,Po).xyz;
	float3 eyePos = float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w);
    float3 vertToViewVec = eyePos - Pw;
	
	OUT.WorldPos    = Pw;
    OUT.EyePos      = eyePos;
	OUT.EyeToPosVec = -vertToViewVec;
    OUT.WorldView   = normalize(vertToViewVec);
    OUT.HPosition   = mul(WvpXf,Po);
    OUT.Colour      = IN.Colour;
    OUT.Colour.a   *= AlphaMultiplier;
	
    return OUT;
}

///////// PIXEL SHADING //////////////////////

// Utility function for cel shading
void CelShadingBG(float3 Nn, float3 WorldPos, float3 Vn,
                  out float3 DiffuseContrib, out float3 SpecularContrib) {
                 
    float3 KeyLightVec  = KeyPointLightPos - WorldPos;
    float3 FillLightVec = FillPointLightPos - WorldPos;

    float3 KeyLn  = normalize(KeyLightVec);
    float3 FillLn = normalize(FillLightVec);

    float3 KeyHn = normalize(Vn + KeyLn);
    float3 KeyLitV = lit(dot(KeyLn,Nn), dot(KeyHn,Nn),Shininess).xyz;

    float3 FillHn = normalize(Vn + FillLn);
    float3 FillLitV = lit(dot(FillLn,Nn), dot(FillHn,Nn),Shininess).xyz;

    float FillLinearAtten = clamp(1.0 / (max(FillPointLightLinearAtten, 0.0001) * distance(FillPointLightPos, WorldPos)), 0, 1);
    float KeyLinearAtten  = clamp(1.0 / (max(KeyPointLightLinearAtten,  0.0001) * distance(KeyPointLightPos,  WorldPos)), 0, 1);

    float3 celDiffuse  = tex1D(CelShadingSampler, KeyLitV.y).rrr;
    float3 celSpecular = tex1D(CelShadingSampler, KeyLitV.z).rrr;
	
    DiffuseContrib  = KeyLinearAtten * (celDiffuse  * KeyPointLightColour) + FillLinearAtten * (celDiffuse  * FillPointLightColour);
    SpecularContrib = KeyLinearAtten * (celSpecular * KeyPointLightColour) + FillLinearAtten * (celSpecular * FillPointLightColour);    
}

float4 celshading_fog_bg_PS(vertexFogOutput IN) : COLOR {
    float3 diffContrib = float3(0,0,0);
    float3 specContrib = float3(0,0,0);
    float3 Nn = normalize(IN.WorldNormal);
    
    CelShadingBG(Nn,IN.WorldPos,IN.WorldView,diffContrib,specContrib);
      
    float3 sceneColour = SpecularColour*specContrib + IN.Colour.rgb*DiffuseColour*diffContrib;
	
	float fogDistance = length(IN.EyeToPosVec);
	float3 viewDir    = -IN.WorldView;
	float fogAmount   = FogMultiplierConstant * exp(-IN.EyePos.y * FogDensity) *
		(1.0 - exp(-fogDistance * -viewDir.y * FogDensity)) / viewDir.y;
	
    return float4(lerp(sceneColour, FogColour, fogAmount), IN.Colour.a);
}

///// TECHNIQUES /////////////////////////////

technique FogBG {
    pass p0 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha); 
        DepthTestEnable = true;
        DepthFunc = LEqual;
        CullFaceEnable = true;
        CullFace = Back;
        PolygonMode = int2(Front, Fill);
        
        VertexProgram = compile arbvp1 celshading_fog_VS();        
        FragmentProgram = compile arbfp1 celshading_fog_bg_PS();
    }     
}
