float Script : STANDARDSGLOBAL <
    string UIWidget = "none";
    string ScriptClass = "object";
    string ScriptOrder = "standard";
    string ScriptOutput = "color";
    string Script = "Technique=Basic;";
> = 0.8;

//// UN-TWEAKABLES - AUTOMATICALLY-TRACKED TRANSFORMS ////////////////

float4x4 WorldITXf : WorldInverseTranspose < string UIWidget="None"; >;
float4x4 WvpXf     : WorldViewProjection < string UIWidget="None"; >;
float4x4 WorldXf   : World < string UIWidget="None"; >;
float4x4 ViewIXf   : ViewInverse < string UIWidget="None"; >;

// Key Point Light ----------------------------------
float3 KeyPointLightPos : Position <
    string Object = "PointLight0";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 KeyPointLightColour : Specular <
    string UIName =  "Diffuse Light";
    string Object = "Pointlight0";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};
// --------------------------------------------------

// Fill Point Light ---------------------------------
float3 FillPointLightPos : Position <
    string Object = "PointLight1";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 FillPointLightColour : Specular <
    string UIName =  "Diffuse Light";
    string Object = "Pointlight1";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};

float FillPointLightLinearAtten <
    string UIName =  "Fill Light Linear Attenuation";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.001;
    string UIWidget = "Slider";
> = 1.0f;
// --------------------------------------------------

// Ball Point Light ---------------------------------
float3 BallPointLightPos : Position <
    string Object = "PointLight2";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 BallPointLightDiffuse : Specular <
    string UIName =  "Diffuse Light";
    string Object = "Pointlight2";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};

float BallPointLightLinearAtten <
    string UIName =  "Ball Light Linear Attenuation";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.001;
    string UIWidget = "Slider";
> = 1.0f;
// --------------------------------------------------

// The colour of the material
float3 DiffuseColour <
    string UIName =  "Prism Colour";
    string UIWidget = "Color";
> = {0.9f,0.90f,0.90f};

float3 SpecularColour <
    string UIName =  "Specular Colour";
    string UIWidget = "Color";
> = {0.30f,0.30f,0.30f};

// Specular exponent for the material
float Shininess <
    string UIWidget = "slider";
    float UIMin = 1.0;
    float UIMax = 128.0;
    float UIStep = 1.0;
    string UIName =  "Shininess";
> = 128.0;

// Portal Block Specific Uniform Variables ------------------
float WarpAmount <
    string UIWidget = "slider";
    float UIMin = 1;
    float UIMax = 1000;
    float UIStep = 1;
    string UIName =  "Warp Amount";
> = 1.0f;

float SceneWidth <
    string UIWidget = "slider";
    float UIMin = 1;
    float UIMax = 1680;
    float UIStep = 1;
    string UIName =  "Width";
> = 1083.0f;

float SceneHeight <
    string UIWidget = "slider";
    float UIMin = 1;
    float UIMax = 1050;
    float UIStep = 1;
    string UIName =  "Height";
> = 852.0f;

float IndexOfRefraction <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 3.0;
    float UIStep = 0.01;
    string UIName =  "Index of Refraction";  
> = 1.33f;

float Timer : TIME <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 4.0;
    float UIStep = 0.01;
    string UIName =  "Timer";
> = 0;

float Scale <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 4.0;
    float UIStep = 0.1;
    string UIName =  "Scale";
> = 1;

float Freq <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 10.0;
    float UIStep = 0.1;
    string UIName =  "Frequency";
> = 1;

float3 FlowDir <
    string UIName = "Flow Direction";
> = {0, 1, 1};

//////// TEXTURE /////////////////////
texture ColourTexture  <
    string ResourceName = "default_color.dds";
    string UIName =  "Diffuse Texture";
    string ResourceType = "2D";
>;

sampler2D ColourSampler = sampler_state {
    Texture = <ColourTexture>;
};  

texture SceneTexture <
    string ResourceName = "scene_background_test.jpg";
    string UIName =  "Scene Texture";
    string ResourceType = "2D";
>;

sampler2D SceneSampler = sampler_state {
    Texture = <SceneTexture>;
    WrapS = ClampToEdge;
    WrapT = ClampToEdge;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
};   

texture NoiseTexture  <
    string ResourceName = "noiseL8_32x32x32.dds";
    string UIName =  "Noise Texture";
    string ResourceType = "3D";
>;

sampler3D NoiseSampler = sampler_state {
    Texture = <NoiseTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
    WrapR = Repeat;
}; 

/* data from application vertex buffer */
struct appdata {
    float3 Position	: POSITION;
    float4 Normal	: NORMAL;
	float4 Colour	: COLOR0;
};

struct vertexOutputPortalBlock {
    float4 HPosition    : POSITION;
    float3 WorldNormal  : TEXCOORD0;
    float3 ProjPos      : TEXCOORD1;
    float3 WorldView    : TEXCOORD2;
    float3 WorldPos     : TEXCOORD3;
	float4 Colour       : TEXCOORD4;
};

vertexOutputPortalBlock PortalBlock_VS(appdata IN) {
	vertexOutputPortalBlock OUT = (vertexOutputPortalBlock)0;
    
    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf,Po).xyz;
    
    float3 worldNormal = mul(WorldITXf,IN.Normal).xyz;
    float3 viewToVert  = Pw - float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w);
    
    OUT.WorldNormal = normalize(worldNormal);
    OUT.WorldView   = normalize(viewToVert);
    
    float4 outPos  = mul(WvpXf,Po);
    OUT.HPosition  = outPos;
    OUT.WorldPos   = Pw.xyz;
    OUT.ProjPos    = outPos.xyz / outPos.w;
	OUT.Colour     = IN.Colour;
    return OUT;
}

/**
 * Refract the given background texture - this will use a given world view and
 * normal vector (both normalized) and find an offset for the lookup into the bg texture.
 * Returns: (x,y) offset into the bg texture to mimic the set refraction.
 */
float2 GetRefractBGOffset(float3 nWorldView, float3 nWorldNormal) {
    // This is a hacked version of the Fresnel effect - it has fixed constants
    // of 0.5 for the bias, 1 for the Scale and 1 for the power
    // The reasoning is that I want a nicely blended bit of both reflection and refraction
    // especially in cases of total internal refraction (which looks ugly and abrupt without this)
    float fresnelCoeff = clamp(0.5f + dot(nWorldView, nWorldNormal), 0, 1);
    // Find the world space refraction vector (IndexOfRefraction_Medium to air)
    float3 refractionVec = refract(nWorldView, nWorldNormal, IndexOfRefraction);
    // Find the world space reflection vector
	float3 reflectionVec = reflect(nWorldView, nWorldNormal);
    
    // Obtain the lookup vector which will be scaled/warped to get an offset for looking up
    // the background/scene texture
    float2 lookupVec = fresnelCoeff*reflectionVec.xy + (1-fresnelCoeff)*refractionVec.xy;
    
    // Use the refraction and scale it to the screen size to get an offset for looking
    // up the texel in the scene texture
    return WarpAmount * lookupVec.xy * float2(1.0/SceneWidth, 1.0/SceneHeight);           
}

float Turbulance(float4 noiseTexVal) {
	return 8.0f * (abs(noiseTexVal.x - 0.25)  + abs(noiseTexVal.y - 0.125) + 
                   abs(noiseTexVal.z - 0.0625) + abs(noiseTexVal.w - 0.03125));
}

float4 PortalBlock_PS(vertexOutputPortalBlock IN) : COLOR {
    float3 nWorldView     = normalize(IN.WorldView.xyz);
    float3 nWorldNormal   = normalize(IN.WorldNormal.xyz);
    float3 nProjPos      = (IN.ProjPos.xyz + float3(1,1,1)) * 0.5;
    
    // Use noise to modify the normal... (using Perlin's method in GPU Gems 1)
    const float epsilon = 0.05f;
    float3 sampleCoord = Scale * (IN.WorldPos.xyz + Freq*Timer*FlowDir);
	
	float UnmodifiedNoiseVal = Turbulance(tex3D(NoiseSampler, sampleCoord));
    float4 bumpGrad = float4(UnmodifiedNoiseVal,
    				         Turbulance(tex3D(NoiseSampler, sampleCoord + float3(epsilon, 0, 0))),
							 Turbulance(tex3D(NoiseSampler, sampleCoord + float3(0, epsilon, 0))),
							 Turbulance(tex3D(NoiseSampler, sampleCoord + float3(0, 0, epsilon))));
	
	float3 dF = (bumpGrad.yzw - bumpGrad.xxx) / epsilon;
	float3 bumpedNormal = normalize(nWorldNormal - dF);

    float2 lookupOffset = GetRefractBGOffset(nWorldView, bumpedNormal);
    float3 textureColour = tex2D(SceneSampler, nProjPos.xy + lookupOffset).rgb;
	float3 haloColour = lerp(IN.Colour.xyz, float3(0), UnmodifiedNoiseVal.x);
	float haloFade = abs(pow(dot(nWorldView, nWorldNormal), 2));
	
    return float4(haloColour + textureColour, haloFade);
}

technique PortalBlock {

    pass p0 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha);
        
        DepthTestEnable = true;
        DepthFunc = LEqual;
        CullFaceEnable = true;
        CullFace = Back;
        PolygonMode = int2(Front, Fill);
        
        VertexProgram = compile arbvp1 PortalBlock_VS();        
        FragmentProgram = compile arbfp1 PortalBlock_PS();
    }
}