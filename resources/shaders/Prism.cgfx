
float4x4 WvpXf : WORLDVIEWPROJECTION <string UIWidget="None";>;
float4x4 WorldITXf : WorldInverseTranspose < string UIWidget="None"; >;
float4x4 ViewIXf   : ViewInverse < string UIWidget="None"; >;
float4x4 WorldXf : World < string UIWidget="None"; >;   
        
// Key Point Light ----------------------------------
float3 KeyPointLightPos : Position <
    string Object = "PointLight0";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 KeyPointLightColour : Specular <
    string UIName =  "Diffuse Light";
    string Object = "Pointlight0";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};
// --------------------------------------------------

// Fill Point Light ---------------------------------
float3 FillPointLightPos : Position <
    string Object = "PointLight1";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 FillPointLightColour : Specular <
    string UIName =  "Diffuse Light";
    string Object = "Pointlight1";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};

float FillPointLightLinearAtten <
    string UIName =  "Fill Light Linear Attenuation";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.001;
    string UIWidget = "Slider";
> = 1.0f;
// --------------------------------------------------

// Ball Point Light ---------------------------------
float3 BallPointLightPos : Position <
    string Object = "PointLight2";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 BallPointLightDiffuse : Specular <
    string UIName =  "Diffuse Light";
    string Object = "Pointlight2";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};

float BallPointLightLinearAtten <
    string UIName =  "Ball Light Linear Attenuation";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.001;
    string UIWidget = "Slider";
> = 1.0f;
// --------------------------------------------------

// The colour of the material
float3 DiffuseColour <
    string UIName =  "Prism Colour";
    string UIWidget = "Color";
> = {0.9f,0.90f,0.90f};

float3 SpecularColour <
    string UIName =  "Specular Colour";
    string UIWidget = "Color";
> = {0.30f,0.30f,0.30f};

// Specular exponent for the material
float Shininess <
    string UIWidget = "slider";
    float UIMin = 1.0;
    float UIMax = 128.0;
    float UIStep = 1.0;
    string UIName =  "Shininess";
> = 128.0;

float AlphaMultiplier <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName =  "AlphaMultiplier";
> = 1.0;

float IndexOfRefraction <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 3.0;
    float UIStep = 0.01;
    string UIName =  "Index of Refraction";  
> = 1.33f;

float SceneWidth <
    string UIWidget = "slider";
    float UIMin = 1;
    float UIMax = 1680;
    float UIStep = 1;
    string UIName =  "Width";
> = 1083.0f;

float SceneHeight <
    string UIWidget = "slider";
    float UIMin = 1;
    float UIMax = 1050;
    float UIStep = 1;
    string UIName =  "Height";
> = 852.0f;

float WarpAmount <
    string UIWidget = "slider";
    float UIMin = 1;
    float UIMax = 1000;
    float UIStep = 1;
    string UIName =  "Warp Amount";
> = 200.0f;

texture ColourTexture  <
    string ResourceName = "default_color.dds";
    string UIName =  "Diffuse Texture";
    string ResourceType = "2D";
>;

sampler2D ColourSampler = sampler_state {
    Texture = <ColourTexture>;
};   

texture SceneTexture <
    string ResourceName = "scene_background_test.jpg";
    string UIName =  "Colour Texture";
    string ResourceType = "2D";
>;

sampler2D SceneSampler = sampler_state {
    Texture = <SceneTexture>;
    WrapS = Repeat;
    WrapT = Repeat;
    WrapR = Repeat;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
};

struct appdata {
    float3 Position : POSITION;
    float4 Normal   : NORMAL;
    float4 Colour   : COLOR0;
};

struct appdata_outlines {
    float3 Position   : POSITION;
    float4 Colour     : COLOR0;
};

/* data passed from vertex shader to pixel shader */
struct vertexOutput {
    float4 HPosition    : POSITION;
    float3 WorldPos     : TEXCOORD1;
    float3 WorldNormal  : TEXCOORD2;
    float3 WorldView    : TEXCOORD3;
    float4 Colour       : TEXCOORD4;
    float3 ProjPos      : TEXCOORD5;
};
 
struct vertexOutput_outlines {
    float4 HPosition    : POSITION;
    float Alpha     : TEXCOORD0;
};

///////// VERTEX SHADING /////////////////////

/*********** Generic Vertex Shader ******/

vertexOutput prism_VS(appdata IN) {
    vertexOutput OUT = (vertexOutput)0;
    OUT.WorldNormal = mul(WorldITXf,IN.Normal).xyz;

    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf,Po).xyz;
    OUT.WorldPos = Pw;
    
    float3 VertToViewVec = float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w) - Pw;
    float4 outPos  = mul(WvpXf,Po);
    OUT.WorldView = normalize(VertToViewVec);
    OUT.HPosition = outPos;
    OUT.ProjPos   = outPos.xyz / outPos.w; 
    OUT.Colour    = IN.Colour;
    OUT.Colour.a *= AlphaMultiplier;
    return OUT;
}


// Utility function for shading the prism via the various scene lights
void PrismShading(float3 Nn,
            float3 WorldPos,
            float3 Vn,
            out float3 DiffuseContrib,
            out float3 SpecularContrib)
{
    float3 KeyLightVec  = KeyPointLightPos - WorldPos;
    float3 FillLightVec = FillPointLightPos - WorldPos;
    
    float3 KeyLn  = normalize(KeyLightVec);
    float3 FillLn = normalize(FillLightVec);
    
    float3 KeyHn = normalize(Vn + KeyLn);
    float3 KeyLitV = lit(dot(KeyLn,Nn),dot(KeyHn,Nn),Shininess).xyz;
    
    float3 FillHn = normalize(Vn + FillLn);
    float3 FillLitV = lit(dot(FillLn,Nn),dot(FillHn,Nn),Shininess).xyz;
    
    float FillLinearAtten = clamp(1.0f / (FillPointLightLinearAtten * distance(FillPointLightPos, WorldPos)), 0, 1);
    FillLinearAtten = clamp(FillLinearAtten, 0, 1);
    
    DiffuseContrib  = (KeyLitV.y * KeyPointLightColour) + FillLinearAtten * (FillLitV.y * FillPointLightColour);
    SpecularContrib = (KeyLitV.z * KeyPointLightColour) + FillLinearAtten * (FillLitV.z * FillPointLightColour);

    float3 BallLn = normalize(BallPointLightPos - WorldPos);
    float3 BallHn = normalize(Vn + BallLn);
    float3 BallLitV = lit(dot(BallLn,Nn), dot(BallHn,Nn), Shininess).xyz;
    
    float BallLinearAtten =  clamp(1.0f / (BallPointLightLinearAtten * distance(BallPointLightPos, WorldPos)), 0, 1);
    
    DiffuseContrib  += BallLinearAtten * (BallLitV.y * BallPointLightDiffuse);
    SpecularContrib += BallLinearAtten * (BallLitV.z * BallPointLightDiffuse);      
}

/**
 * Refract the given background texture - this will use a given world view and
 * normal vector (both normalized) and find an offset for the lookup into the bg texture.
 * Returns: (x,y) offset into the bg texture to mimic the set refraction.
 */
float2 GetRefractBGOffset(float3 nWorldView, float3 nWorldNormal) {
    // This is a hacked version of the Fresnel effect - it has fixed constants
    // of 0.5 for the bias, 1 for the Scale and 1 for the power
    // The reasoning is that I want a nicely blended bit of both reflection and refraction
    // especially in cases of total internal refraction (which looks ugly and abrupt without this)
    float fresnelCoeff = clamp(dot(nWorldView,nWorldNormal), 0, 1);
    // Find the world space reflection vector
    float3 refractionVec = refract(nWorldView, nWorldNormal, IndexOfRefraction);
    // Find the world space refraction vector (IndexOfRefraction_Medium to air)
    float3 reflectionVec = reflect(nWorldView, nWorldNormal);
    
    // Obtain the lookup vector which will be scaled/warped to get an offset for looking up
    // the background/scene texture
    float2 lookupVec = fresnelCoeff*WarpAmount*reflectionVec.xy + (1-fresnelCoeff)*refractionVec.xy;
    
    // Use the refraction and scale it to the screen size to get an offset for looking
    // up the texel in the scene texture
    return lookupVec.xy * float2(1.0/SceneWidth, 1.0/SceneHeight);           
}

float4 prism_PS(vertexOutput IN) : COLOR {
    float3 diffContrib;
    float3 specContrib;
    float3 nWorldView   = normalize(IN.WorldView);
    float3 nWorldNormal = normalize(IN.WorldNormal);
    float3 nProjPos     = (IN.ProjPos.xyz + float3(1,1,1)) * 0.5;
      
    PrismShading(nWorldNormal, IN.WorldPos, nWorldView, diffContrib, specContrib);
    float2 lookupOffset = GetRefractBGOffset(nWorldView, nWorldNormal);
    float3 refractColour = tex2D(SceneSampler, nProjPos.xy + lookupOffset).rgb;
    refractColour = max(0.1f * DiffuseColour, refractColour);

    float3 result = SpecularColour * specContrib + IN.Colour.rgb * DiffuseColour * diffContrib;
    return float4(refractColour * result, IN.Colour.a);
}

vertexOutput_outlines outline_VS(appdata_outlines IN) {
    vertexOutput_outlines OUT = (vertexOutput_outlines)0;
    OUT.HPosition = mul(WvpXf, float4(IN.Position, 1.0f));
    OUT.Alpha = IN.Colour.a * AlphaMultiplier;
    return OUT;
}

float4 outline_PS(vertexOutput_outlines IN) : COLOR {
    return float4(0, 0, 0, IN.Alpha);
}

technique Prism {
    pass p0 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha); 
        DepthTestEnable = true;
        DepthFunc = LEqual;
        CullFaceEnable = true;
        CullFace = Back;
        PolygonMode = int2(Front, Fill);

        VertexProgram = compile arbvp1 prism_VS();        
        FragmentProgram = compile arbfp1 prism_PS();
    }
    
    pass p1 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha); 
        DepthTestEnable = true;
        DepthFunc = LEqual;
        CullFaceEnable = true;
        CullFace = Front;
        LineWidth = 2.5f;
        LineSmoothEnable = true;
        PolygonMode = int2(Back, Line);
        
        VertexProgram = compile arbvp1 outline_VS();
        FragmentProgram = compile arbfp1 outline_PS();
    }       
    
}


