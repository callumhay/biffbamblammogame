
float Timer : TIME < string UIWidget = "None"; >;
float4x4 WvpXf : WORLDVIEWPROJECTION <string UIWidget="None";>;
float4x4 WorldITXf : WorldInverseTranspose < string UIWidget="None"; >;
float4x4 ViewIXf   : ViewInverse < string UIWidget="None"; >;
float4x4 WorldXf : World < string UIWidget="None"; >;	
		
// Key Point Light ----------------------------------
float3 KeyPointLightPos : Position <
    string Object = "PointLight0";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 KeyPointLightColour : Specular <
    string UIName =  "Diffuse Light";
    string Object = "Pointlight0";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};
// --------------------------------------------------

// Fill Point Light ---------------------------------
float3 FillPointLightPos : Position <
    string Object = "PointLight1";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 FillPointLightColour : Specular <
    string UIName =  "Diffuse Light";
    string Object = "Pointlight1";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};

float FillPointLightLinearAtten <
    string UIName =  "Fill Light Linear Attenuation";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.001;
    string UIWidget = "Slider";
> = 1.0f;
// --------------------------------------------------

// Ball Point Light ---------------------------------
float3 BallPointLightPos : Position <
    string Object = "PointLight2";
    string UIName =  "Diffuse Light Position";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float3 BallPointLightDiffuse : Specular <
    string UIName =  "Diffuse Light";
    string Object = "Pointlight2";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};

float BallPointLightLinearAtten <
    string UIName =  "Ball Light Linear Attenuation";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.001;
    string UIWidget = "Slider";
> = 1.0f;
// --------------------------------------------------

// The colour of the material
float3 DiffuseColour <
    string UIName =  "Diffuse Colour";
    string UIWidget = "Color";
> = {0.40f,0.50f,1.00f};

float3 SpecularColour <
    string UIName =  "Specular Colour";
    string UIWidget = "Color";
> = {0.30f,0.30f,0.30f};

// Specular exponent for the material
float Shininess <
    string UIWidget = "slider";
    float UIMin = 1.0;
    float UIMax = 128.0;
    float UIStep = 1.0;
    string UIName =  "Shininess";
> = 128.0;

float Displacement <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 2.0;
    float UIStep = 0.01;
> = 1.6f;

float Speed <
    string UIWidget = "slider";
    float UIMin = 0.01;
    float UIMax = 10.0;
    float UIStep = 0.001;
    string UIName = "Speed";
> = 0.3f;

float WaveScale <
    string UIWidget = "slider";
    float UIMin = 0.01;
    float UIMax = 10.0;
    float UIStep = 0.001;
    string UIName = "Wave Scale";
> = 0.3f;

float RefractScale <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 10.0;
    float UIStep = 0.01;
    string UIName =  "Refraction Scale";
> = 1;

float NoiseScale <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 10.0;
    float UIStep = 0.01;
    string UIName =  "Noise Scale";
> = 2;

float SceneWidth <
    string UIWidget = "slider";
    float UIMin = 1;
    float UIMax = 1680;
    float UIStep = 1;
    string UIName =  "Width";
> = 1083.0f;

float SceneHeight <
    string UIWidget = "slider";
    float UIMin = 1;
    float UIMax = 1050;
    float UIStep = 1;
    string UIName =  "Height";
> = 852.0f;

//////////////////////////// texture ///////////////////////

texture SceneTexture <
    string ResourceName = "scene_background_test.jpg";
    string UIName =  "Scene Texture";
    string ResourceType = "2D";
>;

sampler2D SceneSampler = sampler_state {
    Texture = <SceneTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;	
    WrapS = Repeat;
    WrapT = Repeat;
};

texture ColourTexture  <
    string ResourceName = "noiseL8_32x32x32.dds";
    string UIName =  "Noise Texture";
    string ResourceType = "3D";
>;

sampler3D ColourSampler = sampler_state {
    Texture = <ColourTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
    WrapR = Repeat;
};  


struct appData {
    float3 Position     : POSITION;
    float4 Normal       : NORMAL;
};

// define outputs from vertex shader
struct vertexData {
    float4 HPosition	: POSITION;
	float3 WorldView	: TEXCOORD0;
	float3 WorldNormal	: TEXCOORD1;
	float3 WorldPos     : TEXCOORD2;
	float3 ProjPos      : TEXCOORD3;
};

vertexData sticky_paddle_VS(appData IN) {
	
    vertexData OUT;
	float4 Pos = float4(IN.Position.xyz, 1.0f);
    
	// Displacement along normal
        float3 Nn = normalize(mul(WorldITXf, IN.Normal).xyz);
	
	float DistortY = sin(WaveScale * IN.Position.x + Timer*Speed) * Displacement;

	float3 WaveDistort = float3(0, DistortY, 0);
        float3 NewPos = Pos.xyz + Pos.xyz * WaveDistort;
	
	float3 Pw = mul(WorldXf, Pos).xyz;
	float3 viewToVert  = float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w) - Pw;
	float4 ProjPos = mul(WvpXf, float4(NewPos, 1));
	
	OUT.WorldPos	= Pw;
	OUT.WorldView   = normalize(viewToVert);
	OUT.WorldNormal = Nn;
	OUT.ProjPos	    = ProjPos.xyz / ProjPos.w;
	OUT.HPosition 	= ProjPos;
	

    return OUT;
}

void SpecularHighlight(float3 Nn, float3 WorldPos, float3 Vn, out float3 SpecularContrib, out float3 DiffuseContrib)
{
	float3 KeyLightVec  = KeyPointLightPos - WorldPos;
	float3 FillLightVec = FillPointLightPos - WorldPos;
	
	float3 KeyLn  = normalize(KeyLightVec);
	float3 FillLn = normalize(FillLightVec);
	
    float3 KeyHn = normalize(Vn + KeyLn);
    float3 KeyLitV = lit(dot(KeyLn,Nn),dot(KeyHn,Nn),Shininess).xyz;
    
	float3 FillHn = normalize(Vn + FillLn);
    float3 FillLitV = lit(dot(FillLn,Nn),dot(FillHn,Nn),Shininess).xyz;
	
	float FillLinearAtten = clamp(1.0f / (FillPointLightLinearAtten * distance(FillPointLightPos, WorldPos)), 0, 1);
	FillLinearAtten = clamp(FillLinearAtten, 0, 1);
	
    SpecularContrib = (KeyLitV.z * KeyPointLightColour) + FillLinearAtten * (FillLitV.z * FillPointLightColour);
	DiffuseContrib  = (KeyLitV.y * KeyPointLightColour) + FillLinearAtten * (FillLitV.y * FillPointLightColour);
	  
	float3 BallLn = normalize(BallPointLightPos - WorldPos);
	float3 BallHn = normalize(Vn + BallLn);
	float3 BallLitV = lit(dot(BallLn,Nn), dot(BallHn,Nn), Shininess).xyz;
	
	float BallLinearAtten =  clamp(1.0f / (BallPointLightLinearAtten * distance(BallPointLightPos, WorldPos)), 0, 1);
	SpecularContrib += BallLinearAtten * (BallLitV.z * BallPointLightDiffuse);
	DiffuseContrib  += BallLinearAtten * (BallLitV.y * BallPointLightDiffuse);
}


float4 sticky_paddle_PS(vertexData IN) : COLOR {
	// Specular from ball and key light
    float3 specContrib;
	float3 diffuseContrib;
    float3 Vn       = normalize(IN.WorldView);
    float3 Nn       = normalize(IN.WorldNormal);
    float3 nProjPos = (IN.ProjPos.xyz + float3(1,1,1)) * 0.5;
	
	SpecularHighlight(Nn, IN.WorldPos, Vn, specContrib, diffuseContrib);
	
	float4 noise = tex3D(ColourSampler, NoiseScale * float3(nProjPos.xy, Timer*0.01f));
	
	// Make sure the noise value is in the range [-1,1]
	float noiseVal = 8.0 * (abs(noise.x - 0.25)  + abs(noise.y - 0.125) + 
                            abs(noise.z - 0.0625) + abs(noise.w - 0.03125));
	noiseVal = (clamp(noiseVal, 0, 1) * 2.0f) - 1.0f;
	
	float2 distortLookup = float2(1.0/SceneWidth, 1.0/SceneHeight) * RefractScale * noiseVal.xx;
	float3 sceneColour = tex2D(SceneSampler, nProjPos.xy + distortLookup).rgb;
	
	float3 finalColour = SpecularColour * specContrib + DiffuseColour * lerp(diffuseContrib, sceneColour, 0.33f);
	return float4(finalColour.xyz, 1.0f);
	//return float4(noiseVal.xxx, 1.0f);
}

technique StickyPaddle {
	
    pass p0 <string Script = "Draw=geometry;";> {
		DepthTestEnable = true;
		DepthFunc = LEqual;

		CullFaceEnable = true;
		CullFace = Back;
		PolygonMode = int2(Front, Fill);
		
		VertexProgram = compile arbvp1 sticky_paddle_VS();
        FragmentProgram = compile arbfp1 sticky_paddle_PS();
    }
}