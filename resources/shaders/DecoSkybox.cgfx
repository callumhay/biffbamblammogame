/*********************************************************************
Skybox.cgfx
Created by: Callum Hay
The following is a skybox shader for use with a cubemap to ensure that
whenever the user looks at this material they see the right place on
the cube map (skybox).
**********************************************************************/

float4x4 ModelViewProjXf : WorldViewProjection < string UIWidget="None"; >;
float4x4 WorldXf         : World < string UIWidget="None"; >;

float Freq <
    string UIWidget = "slider";
    float UIMin = 0.01;
    float UIMax = 10.0;
    float UIStep = 0.01;
    string UIName =  "Twinkle Frequency";
> = 1;

float Timer : TIME <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 4.0;
    float UIStep = 0.01;
    string UIName =  "Timer";
> = 0;

float3 ViewDir <
> = {0, 0, 1};

texture SkyTex : Environment <
    string ResourceName = "starfield_1024x1024.jpg";
    string UIName = "Sky Texture";
    string ResourceType = "2D";
>;

sampler2D SkySampler = sampler_state {
	Texture = <SkyTex>;
};

texture NoiseTexture  <
    string ResourceName = "noiseL8_32x32x32.dds";
    string UIName =  "Noise Texture";
    string ResourceType = "3D";
>;

sampler3D NoiseSampler = sampler_state {
    Texture = <NoiseTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
    WrapR = Repeat;
    
};  

// application to vertex shader ------------------------------------------
struct appdata {
    float3 Position	: POSITION;
	float2 UV       : TEXCOORD0;
};

// vertex shader to pixel shader -----------------------------------------
struct vertexOutput {
    float4 HPosition    : POSITION;
	float3 WorldPos	    : TEXCOORD0;
	float2 UV           : TEXCOORD1;
};


// Vertex Shader ---------------------------------------------------------
vertexOutput deco_skybox_VS(appdata IN) {
    vertexOutput OUT = (vertexOutput)0;
    
    float4 Pos = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf,Pos).xyz;
	
    OUT.HPosition = mul(ModelViewProjXf,Pos);
    OUT.WorldPos = Pw;
	OUT.UV = IN.UV;
	
	return OUT;
}


// Fragement Shader (Floating Point) --------------------------------------
float4 deco_skybox_PS(vertexOutput IN) : COLOR {
	const float SCALE = 10;
	
	// Make the stars in the sky twinkle using a noise texture
	// lookup and multiplying it with the starry sky lookup
	float3 noiseLookup = IN.WorldPos + Freq*Timer*ViewDir/SCALE;
	
	float4 noiseColour = tex3D(NoiseSampler, SCALE * noiseLookup).rgba;
	//float noiseVal = (noiseColour.x + noiseColour.y + noiseColour.z + noiseColour.w + 0.03125) * 1.5f;
	float noiseVal = (noiseColour.z - 0.045f) * 25.0f;
	noiseVal = clamp(noiseVal, 0, 1);
	float3 skyColour   = tex2D(SkySampler, IN.UV.xy).rgb;
	float3 finalColour = noiseVal * skyColour;
	
	return float4(finalColour, 1);
    //return float4(noiseVal.rrr,1.0f);
}

technique DecoSkybox {
    pass pass0 {
    	PolygonMode = int2(Front, Fill);
        CullFaceEnable = true;
        CullFace = Back;
        DepthTestEnable = true;
		
        VertexProgram = compile vp40 deco_skybox_VS();
        FragmentProgram = compile fp40 deco_skybox_PS();
    }
}

