float Script : STANDARDSGLOBAL <
    string UIWidget = "none";
    string ScriptClass = "object";
    string ScriptOrder = "standard";
    string ScriptOutput = "color";
    string Script = "Technique=Main;";
> = 0.8;

//// UN-TWEAKABLES - AUTOMATICALLY-TRACKED TRANSFORMS ////////////////

float4x4 WorldITXf : WorldInverseTranspose < string UIWidget="None"; >;
float4x4 WvpXf     : WorldViewProjection < string UIWidget="None"; >;
float4x4 WorldXf   : World < string UIWidget="None"; >;
float4x4 ViewIXf   : ViewInverse < string UIWidget="None"; >;

//// TWEAKABLE PARAMETERS ////////////////////

float Timer : TIME <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 4.0;
    float UIStep = 0.01;
    string UIName =  "Timer";
> = 0;

float Scale <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 4.0;
    float UIStep = 0.1;
    string UIName =  "Scale";
> = 1;

float Freq <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 10.0;
    float UIStep = 0.1;
    string UIName =  "Frequency";
> = 1;

float FadeExp <
    string UIWidget = "slider";
    float UIMin = 1.0;
    float UIMax = 128.0;
    float UIStep = 1.0;
    string UIName =  "Fade Exponent";
> = 1;

float ConstAmount <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName =  "Constant Amount";
> = 0;

float AlphaMultiplier <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName =  "Alpha Multiplier";
> = 0;


float3 FlowDir <
    string UIName = "Flow Direction";
> = {0, 1, 1};

float3 Colour <
    string UIName =  "Colour";
    string UIWidget = "Color";
> = {0.30f,0.30f,0.30f};

//////// COLOR & TEXTURE /////////////////////

texture NoiseTexture  <
    string ResourceName = "noiseL8_32x32x32.dds";
    string UIName =  "Noise Texture";
    string ResourceType = "3D";
>;

sampler3D NoiseSampler = sampler_state {
    Texture = <NoiseTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
    WrapR = Repeat;
    
};  

texture MaskTexture <
    string ResourceName = "Circle_Gradient_64x64.png";
    string UIName = "Mask Texture";
    string ResourceType = "2D";
>;

sampler2D MaskSampler = sampler_state {
    Texture = <MaskTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
};

//////// CONNECTOR DATA STRUCTURES ///////////

/* data from application vertex buffer */
struct appdata {
    float3 Position	: POSITION;
    float4 UV		    : TEXCOORD0;
    float4 Normal	  : NORMAL;
    float4 Colour   : COLOR0;
};

/* data passed from vertex shader to pixel shader */
struct vertexOutput {
    float4 HPosition	  : POSITION;
    float3 WorldPos	    : TEXCOORD0;
    float3 WorldView    : TEXCOORD1;
    float3 WorldNormal  : TEXCOORD2;
    float3 UV           : TEXCOORD3;
    float4 Colour       : TEXCOORD4;
};
 
///////// VERTEX SHADING /////////////////////

/*********** Generic Vertex Shader ******/

vertexOutput std_VS(appdata IN) {
    vertexOutput OUT = (vertexOutput)0;
    
    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf,Po).xyz;

    OUT.WorldNormal = normalize(mul(WorldITXf,IN.Normal).xyz);
    OUT.WorldView   = normalize(float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w) - Pw);
    OUT.WorldPos  = Pw;
    OUT.HPosition = mul(WvpXf,Po);
    OUT.UV = IN.UV.xyz;
    OUT.Colour = IN.Colour;
    return OUT;
}

vertexOutput localpos_VS(appdata IN) {
    vertexOutput OUT = (vertexOutput)0;
    
    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf,Po).xyz;

    OUT.WorldNormal = normalize(mul(WorldITXf,IN.Normal).xyz);
    OUT.WorldView   = normalize(float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w) - Pw);
    OUT.WorldPos  = Po.xyz;
    OUT.HPosition = mul(WvpXf,Po);
    OUT.UV = IN.UV.xyz;
    OUT.Colour = IN.Colour;
    return OUT;
}

///////// PIXEL SHADING //////////////////////

float4 smokey_PS(vertexOutput IN) : COLOR {
    
    float3 nN = normalize(IN.WorldNormal);
    float3 nV = normalize(IN.WorldView);

    float3 sampleCoord = IN.WorldPos.xyz + Freq*Timer*FlowDir;
    
    float4 texVal = tex3D(NoiseSampler, Scale * sampleCoord);
    float totalTexVal = (texVal.x + texVal.y + texVal.z + texVal.w + 0.03125) * 1.7f;
    
    float FadeAmt = dot(-nV, nN);
    float fadeAmtCoeff = pow(abs(FadeAmt), FadeExp);
    
    float4 final = float4(clamp(Colour*totalTexVal.xxx, 0, 1), clamp(totalTexVal.x*fadeAmtCoeff*AlphaMultiplier + ConstAmount, 0, 1));
    return float4(final);
}

float4 smokey_sprite_PS(vertexOutput IN) : COLOR {
    
    float3 nN = normalize(IN.WorldNormal);
    float3 nV = normalize(IN.WorldView);

    float3 sampleCoord = IN.WorldPos.xyz + Freq*Timer*FlowDir;
    
    float4 texVal = tex3D(NoiseSampler, Scale * sampleCoord);
    float totalTexVal = (texVal.x + texVal.y + texVal.z + texVal.w) * 2.0f;
    
    float4 maskTexVal = tex2D(MaskSampler, IN.UV.xy).rgba;
    float fadeAmtCoeff = maskTexVal.a;
    
    // return as float4
    float4 final = clamp(IN.Colour * float4(totalTexVal.rrr, totalTexVal.r*fadeAmtCoeff), 0, 1);
    return float4(final);
}

float4 firey_sprite_PS(vertexOutput IN) : COLOR {
    
    float3 nN = normalize(IN.WorldNormal);
    float3 nV = normalize(IN.WorldView);

    float3 sampleCoord = IN.WorldPos.xyz + Freq*Timer*FlowDir;
    
    float4 texVal = tex3D(NoiseSampler, Scale * sampleCoord);
    float totalTexVal = 8.0 * (abs(texVal.x - 0.25)  + abs(texVal.y - 0.125) + 
                               abs(texVal.z - 0.0625) + abs(texVal.w - 0.03125));
    totalTexVal = clamp(totalTexVal, 0, 1);
                          
    float4 maskTexVal = tex2D(MaskSampler, IN.UV.xy).rgba;
    float fadeAmtCoeff = maskTexVal.a;
    
    // return as float4
    float4 final = clamp(IN.Colour * float4(1, 1, 1, totalTexVal*fadeAmtCoeff), 0, 1);
    return float4(final);
}

///// TECHNIQUES /////////////////////////////

technique Basic < string Script = "Pass=p0;"; > {

    pass p0 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha);
        BlendEquation = FuncAdd;
		    
        PolygonMode = int2(Front, Fill);
        DepthTestEnable = true;
        DepthFunc = LEqual;
		    DepthMask = false;
		    CullFaceEnable = true;//false;

        VertexProgram = compile vp40 std_VS();            
        FragmentProgram = compile fp40 smokey_PS();
    }
}

technique GhostBall < string Script = "Pass=p0;"; > {

    pass p0 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha);
        BlendEquation = FuncAdd;
		    
        PolygonMode = int2(Front, Fill);
        DepthTestEnable = true;
        DepthFunc = LEqual;
		    DepthMask = false;
		    CullFaceEnable = true;//false;

        VertexProgram = compile vp40 localpos_VS();            
        FragmentProgram = compile fp40 smokey_PS();
    }
}

// The smokesprite technique allows the use of a mask texture
// so that the effect can be faded or shaped as required
technique SmokeSprite < string Script = "Pass=p0;"; > {

    pass p0 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha);
		    
        PolygonMode = int2(Front, Fill);
        DepthTestEnable = true;
        DepthFunc = LEqual;
		    DepthMask = false;
		    CullFaceEnable = true;

        VertexProgram = compile vp40 localpos_VS();            
        FragmentProgram = compile fp40 smokey_sprite_PS();
    }
}

technique FireSprite < string Script = "Pass=p0;"; > {

    pass p0 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha);
		    BlendEquation = FuncAdd;
            
        PolygonMode = int2(Front, Fill);
        DepthTestEnable = true;
        DepthFunc = LEqual;
		    DepthMask = false;
		    CullFaceEnable = true;

        VertexProgram = compile vp40 localpos_VS();            
        FragmentProgram = compile fp40 firey_sprite_PS();
    }
}

/////////////////////////////////////// eof //
