
#define PI 3.14159265358979323846264338327950288

// This should usually be equal to
// 1.0f / texture_pixel_width for a horizontal blur.
float BlurSizeHorizontal;

// This should usually be equal to
// 1.0f / texture_pixel_height for a vertical blur.
float BlurSizeVertical;

// The sigma value for the gaussian function: higher value means more blur
// A good value for 9x9 is around 3 to 5
// A good value for 7x7 is around 2.5 to 4
// A good value for 5x5 is around 2 to 3.5
float Sigma;            

// How much greyscale there should be, 0 is no greyscale (full colour), 1 is full greyscale (no colour)
float GreyscaleFactor <
    string UIName =  "Greyscale Factor";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.001;
    string UIWidget = "Slider";
> = 1.0f;

texture SceneTex <
    string ResourceName = "lasers.jpg";
    string UIName = "Scene Texture";
    string ResourceType = "2D";
>;

sampler2D SceneSampler = sampler_state {
    Texture = <SceneTex>;   
    WrapS = ClampToEdge;
    WrapT = ClampToEdge;
};

/**
 * Greyscale conversion function that desaturates a given colour.
 */
float3 ToGreyscale(float3 sceneColour) {
    float sceneTone = (sceneColour.r + sceneColour.g + sceneColour.b) / 3.0f;
    return float3(sceneTone);
}

float4 GreyscaleLookup(float2 texCoord) {
    float3 textureColour   = tex2D(SceneSampler, texCoord).rgb;
    float3 greyscaleColour = ToGreyscale(textureColour.rgb);
    return float4(lerp(textureColour, greyscaleColour, GreyscaleFactor), 1.0f);
}

float4 performGaussianBlurWithGreyscale(float2 UV, float blurPixelsPerSide, float2 blurMultiplyVec, float blurSize) {
	
    // Incremental Gaussian Coefficent Calculation (See GPU Gems 3 pp. 877 - 889)
    float3 incrementalGaussian;
    incrementalGaussian.x = 1.0 / (sqrt(2.0 * PI) * Sigma);
    incrementalGaussian.y = exp(-0.5 / (Sigma * Sigma));
    incrementalGaussian.z = incrementalGaussian.y * incrementalGaussian.y;

    float4 avgValue = float4(0.0f, 0.0f, 0.0f, 0.0f);
    float coefficientSum = 0.0f;

    // Take the central sample first...
    avgValue += GreyscaleLookup(UV) * incrementalGaussian.x;
    coefficientSum += incrementalGaussian.x;
    incrementalGaussian.xy *= incrementalGaussian.yz;

    // Go through the remaining samples
    for (float i = 1.0f; i <= blurPixelsPerSide; i++) {
        avgValue += GreyscaleLookup(UV - i * blurSize * blurMultiplyVec) * incrementalGaussian.x;
        avgValue += GreyscaleLookup(UV + i * blurSize * blurMultiplyVec) * incrementalGaussian.x;
        coefficientSum += 2 * incrementalGaussian.x;
        incrementalGaussian.xy *= incrementalGaussian.yz;
    }
    
    return (avgValue / coefficientSum);
}

float4 rows_PS(float2 UV : TEXCOORD0) : COLOR {
	return performGaussianBlurWithGreyscale(UV, 1.0, float2(1, 0), BlurSizeHorizontal);
}
float4 cols_PS(float2 UV : TEXCOORD0) : COLOR {
	return performGaussianBlurWithGreyscale(UV, 1.0, float2(0, 1), BlurSizeVertical);
}

technique PostTutorialAttention {
    pass rows {
        FragmentProgram = compile arbfp1 rows_PS();
    }
    pass cols {
        FragmentProgram = compile arbfp1 cols_PS();        
    }
}