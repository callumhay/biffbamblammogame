/**
 * PostRefract.cgfx
 * Author: Callum Hay
 * The following is a post-processing effect that will take a given
 * geometry and, using its normals, distort the given rendered scene 
 * quad in the area where that mesh would normally be rendered -
 * the effect of this is a kind of 'cloaking/invisiblity' of the mesh.
 */

float Script : STANDARDSGLOBAL <
    string UIWidget = "none";
    string ScriptClass = "object";
    string ScriptOrder = "standard";
    string ScriptOutput = "color";
    string Script = "Technique=Basic;";
> = 0.8;

//// UN-TWEAKABLES - AUTOMATICALLY-TRACKED TRANSFORMS ////////////////

float4x4 WorldITXf : WorldInverseTranspose < string UIWidget="None"; >;
float4x4 WvpXf     : WorldViewProjection < string UIWidget="None"; >;
float4x4 WorldXf   : World < string UIWidget="None"; >;
float4x4 ViewIXf   : ViewInverse < string UIWidget="None"; >;

//// TWEAKABLE PARAMETERS ////////////////////
float WarpAmount <
    string UIWidget = "slider";
    float UIMin = 1;
    float UIMax = 1000;
    float UIStep = 1;
    string UIName =  "Warp Amount";
> = 1.0f;

float SceneWidth <
    string UIWidget = "slider";
    float UIMin = 1;
    float UIMax = 1680;
    float UIStep = 1;
    string UIName =  "Width";
> = 1083.0f;

float SceneHeight <
    string UIWidget = "slider";
    float UIMin = 1;
    float UIMax = 1050;
    float UIStep = 1;
    string UIName =  "Height";
> = 852.0f;

float IndexOfRefraction <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 3.0;
    float UIStep = 0.01;
    string UIName =  "Index of Refraction";  
> = 1.33f;

float Timer : TIME <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 4.0;
    float UIStep = 0.01;
    string UIName =  "Timer";
> = 0;

float Scale <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 4.0;
    float UIStep = 0.1;
    string UIName =  "Scale";
> = 1;

float Freq <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 10.0;
    float UIStep = 0.1;
    string UIName =  "Frequency";
> = 1;

//////// TEXTURE /////////////////////

texture SceneTexture <
    string ResourceName = "scene_background_test.jpg";
    string UIName =  "Scene Texture";
    string ResourceType = "2D";
>;

sampler2D SceneSampler = sampler_state {
    Texture = <SceneTexture>;
    WrapS = ClampToEdge;
    WrapT = ClampToEdge;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
};   

texture NormalTexture <
    string ResourceName = "SphereNormals_128x128.png";
    string UIName =  "Normal Texture";
    string ResourceType = "2D";
>;

sampler2D NormalSampler = sampler_state {
    Texture = <NormalTexture>;
    WrapS = ClampToEdge;
    WrapT = ClampToEdge;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
};

texture OverlayTexture <
    string ResourceName = "ink_splatter_1024x512.png";
    string UIName =  "Overlay Texture";
    string ResourceType = "2D";
>;

sampler2D OverlaySampler = sampler_state {
    Texture = <OverlayTexture>;
    WrapS = ClampToEdge;
    WrapT = ClampToEdge;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
};


texture NoiseTexture  <
    string ResourceName = "noiseL8_32x32x32.dds";
    string UIName =  "Noise Texture";
    string ResourceType = "3D";
>;

sampler3D NoiseSampler = sampler_state {
    Texture = <NoiseTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
    WrapR = Repeat;
    
};

//////// CONNECTOR DATA STRUCTURES ///////////

/* data from application vertex buffer */
struct appdata {
    float3 Position : POSITION;
    float4 Normal   : NORMAL;
    float4 Colour   : COLOR0;
};

struct appdataUV {
    float3 Position : POSITION;
    float4 Colour   : COLOR0;
    float2 UV       : TEXCOORD0;
};

/* data passed from vertex shader to pixel shader */
struct vertexOutputPostRefract {
    float4 HPosition    : POSITION;
    float3 WorldNormal  : TEXCOORD0;
    float3 ProjPos      : TEXCOORD1;
    float3 WorldView    : TEXCOORD2;
    float4 Colour       : TEXCOORD5;
};

struct vertexOutputPostRefractNormalTex {
    float4 HPosition    : POSITION;
    float3 ProjPos      : TEXCOORD1;
    float3 WorldView    : TEXCOORD2;
    float2 UV           : TEXCOORD3;
    float4 Colour       : TEXCOORD4;
};

struct vertexOutputPostRefractNormalTexWithNoise {
    float4 HPosition    : POSITION;
    float3 WorldPos     : TEXCOORD0;
    float3 ProjPos      : TEXCOORD1;
    float3 WorldView    : TEXCOORD2;
    float2 UV           : TEXCOORD3;
    float4 Colour       : TEXCOORD4;
};


///////// VERTEX SHADING /////////////////////

vertexOutputPostRefract PostRefract_VS(appdata IN) {
    vertexOutputPostRefract OUT = (vertexOutputPostRefract)0;
    
    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf,Po).xyz;
    
    float3 worldNormal = mul(WorldITXf,IN.Normal).xyz;
    float3 viewToVert  = Pw - float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w);
    
    OUT.WorldNormal = normalize(worldNormal);
    OUT.WorldView   = normalize(viewToVert);
    
    float4 outPos  = mul(WvpXf,Po);
    OUT.HPosition  = outPos;
    OUT.ProjPos    = outPos.xyz / outPos.w;
    OUT.Colour     = IN.Colour;
    return OUT;
}

vertexOutputPostRefractNormalTex PostRefractNormalTex_VS(appdataUV IN) {
    vertexOutputPostRefractNormalTex OUT = (vertexOutputPostRefractNormalTex)0;
    
    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf,Po).xyz;
    float3 viewToVert  = Pw - float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w);
    
    OUT.WorldView   = normalize(viewToVert);
    
    float4 outPos  = mul(WvpXf,Po);
    OUT.HPosition  = outPos;
    OUT.ProjPos    = outPos.xyz / outPos.w;
    OUT.UV         = IN.UV;
    OUT.Colour     = IN.Colour;
    return OUT;
}


vertexOutputPostRefractNormalTexWithNoise PostRefractNormalTexWithNoise_VS(appdataUV IN) {
    vertexOutputPostRefractNormalTexWithNoise OUT = (vertexOutputPostRefractNormalTexWithNoise)0;
    
    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf,Po).xyz;
    float3 viewToVert  = Pw - float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w);
    
    OUT.WorldView   = normalize(viewToVert);
    
    float4 outPos  = mul(WvpXf,Po);
    OUT.HPosition  = outPos;
    OUT.WorldPos   = outPos.xyz;
    OUT.ProjPos    = outPos.xyz / outPos.w;
    OUT.UV         = IN.UV;
    OUT.Colour     = IN.Colour;
    return OUT;
}

///////// PIXEL SHADING //////////////////////

/**
 * Refract the given background texture - this will use a given world view and
 * normal vector (both normalized) and find an offset for the lookup into the bg texture.
 * Returns: (x,y) offset into the bg texture to mimic the set refraction.
 */
float2 GetRefractBGOffset(float3 nWorldView, float3 nWorldNormal) {
    // This is a hacked version of the Fresnel effect - it has fixed constants
    // of 0.5 for the bias, 1 for the Scale and 1 for the power
    // The reasoning is that I want a nicely blended bit of both reflection and refraction
    // especially in cases of total internal refraction (which looks ugly and abrupt without this)
    float fresnelCoeff = clamp(1.5f + dot(nWorldView,nWorldNormal), 0, 1);
    // Find the world space reflection vector
    float3 refractionVec = refract(nWorldView, nWorldNormal, IndexOfRefraction);
    // Find the world space refraction vector (IndexOfRefraction_Medium to air)
    float3 reflectionVec = reflect(nWorldView, nWorldNormal);
    
    // Obtain the lookup vector which will be scaled/warped to get an offset for looking up
    // the background/scene texture
    float2 lookupVec = fresnelCoeff*reflectionVec.xy + (1-fresnelCoeff)*refractionVec.xy;
    
    // Use the refraction and scale it to the screen size to get an offset for looking
    // up the texel in the scene texture
    return WarpAmount * lookupVec.xy * float2(1.0/SceneWidth, 1.0/SceneHeight);           
}

float4 PostRefract_PS(vertexOutputPostRefract IN) : COLOR {
    float3 nWorldView     = normalize(IN.WorldView.xyz);
    float3 nWorldNormal   = normalize(IN.WorldNormal.xyz);
    float3 nProjPos      = (IN.ProjPos.xyz + float3(1,1,1)) * 0.5;
    
    float2 lookupOffset = GetRefractBGOffset(nWorldView, nWorldNormal);
    float3 textureColour = tex2D(SceneSampler, nProjPos.xy + lookupOffset).rgb;
 
    return IN.Colour * float4(textureColour, 1.0f);
}

float4 PostRefractNormalTex_PS(vertexOutputPostRefractNormalTex IN) : COLOR {
    float3 nWorldView     = normalize(IN.WorldView.xyz);
    float3 nProjPos      = (IN.ProjPos.xyz + float3(1,1,1)) * 0.5;
    
    // Get the normal from the texture of the object
    float4 normalSample = tex2D(NormalSampler, IN.UV).rgba;
    // Convert the RGB colour into a normal with components in [-1,1]
    float3 normalFromTex = normalize(2 * normalSample.rbg - float3(1,1,1));
    
    float2 lookupOffset = GetRefractBGOffset(nWorldView, normalFromTex);
    float3 textureColour = tex2D(SceneSampler, nProjPos.xy + lookupOffset).rgb;
    
    return IN.Colour * float4(textureColour, normalSample.a);
}

float4 PostRefractNormalTexWithOverlay_PS(vertexOutputPostRefractNormalTex IN) : COLOR {
    float3 nWorldView     = normalize(IN.WorldView.xyz);
    float3 nProjPos      = (IN.ProjPos.xyz + float3(1,1,1)) * 0.5;
    
    // Get the normal from the texture of the object
    float4 normalSample = tex2D(NormalSampler, IN.UV).rgba;
    // Convert the RGB colour into a normal with components in [-1,1]
    float3 normalFromTex = normalize(2 * normalSample.rbg - float3(1,1,1));
    
    // Get the overlay texture (adds detail to the refraction...)
    float4 overlayColour = tex2D(OverlaySampler, IN.UV).rgba;
    
    float2 lookupOffset = GetRefractBGOffset(nWorldView, normalFromTex);
    float3 textureColour = tex2D(SceneSampler, nProjPos.xy + lookupOffset).rgb;
    
    return clamp(IN.Colour * ((1.0f - overlayColour.a) * float4(textureColour, normalSample.a) + overlayColour.a * float4(1.1f * overlayColour.rgb, 1.0f)), 0, 1);
}

float Turbulance(float4 noiseSample) {
    float totalTexVal   = 8.0f * (abs(noiseSample.x - 0.25)  + abs(noiseSample.y - 0.125) + 
                                  abs(noiseSample.z - 0.0625) + abs(noiseSample.w - 0.03125));
    return clamp(totalTexVal, 0.0f, 1.0f);
}

float4 PostRefractNormalTexWithNoise_PS(vertexOutputPostRefractNormalTexWithNoise IN) : COLOR {
    float3 nWorldView     = normalize(IN.WorldView.xyz);
    float3 nProjPos      = (IN.ProjPos.xyz + float3(1,1,1)) * 0.5;
    
    // Get the normal from the texture of the object
    float4 normalSample = tex2D(NormalSampler, IN.UV).rgba;
    
    // Get the normal modification using the noise texture
    const float EPSILON = 0.01f;
    float3 lookUpCoord  = Scale * IN.WorldPos.xyz + (Freq * Timer * float3(0, 0, 1));
    float4 noiseSample0 = tex3D(NoiseSampler, lookUpCoord);
    float4 noiseSampleX = tex3D(NoiseSampler, lookUpCoord + float3(EPSILON, 0.0f, 0.0f));
    float4 noiseSampleY = tex3D(NoiseSampler, lookUpCoord + float3(0.0f, EPSILON, 0.0f));
    float4 noiseSampleZ = tex3D(NoiseSampler, lookUpCoord + float3(0.0f, 0.0f, EPSILON));

    float3 tubulance0     = float3(Turbulance(noiseSample0));
    float3 turbulanceXYZ  = float3(Turbulance(noiseSampleX), Turbulance(noiseSampleY), Turbulance(noiseSampleZ));
    float3 dNoise         = (turbulanceXYZ - tubulance0) / EPSILON;
   
    // Convert the RGB colour into a normal with components in [-1,1]
    float3 normalFromTex = normalize((2 * normalSample.rbg - float3(1,1,1)) - dNoise);
    
    float2 lookupOffset = GetRefractBGOffset(nWorldView, normalFromTex);
    float3 textureColour = tex2D(SceneSampler, nProjPos.xy + lookupOffset).rgb;
 
    return IN.Colour * float4(textureColour, normalSample.a);
}

///// TECHNIQUES /////////////////////////////

technique PostRefractGeom {

    pass p0 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha);
        
        DepthTestEnable = true;
        DepthFunc = LEqual;
        CullFaceEnable = true;
        CullFace = Back;
        PolygonMode = int2(Front, Fill);
        
        VertexProgram = compile arbvp1 PostRefract_VS();        
        FragmentProgram = compile arbfp1 PostRefract_PS();
    }  
}

technique PostRefractNormalTex {

    pass p0 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha);
        BlendEquation = FuncAdd;
            
        PolygonMode = int2(Front, Fill);
        
        CullFace = Back;
        CullFaceEnable = true;
  
        VertexProgram = compile arbvp1 PostRefractNormalTex_VS();        
        FragmentProgram = compile arbfp1 PostRefractNormalTex_PS();
    }  
}

technique PostRefractNormalTexWithOverlay {

    pass p0 < string Script = "Draw=geometry;"; > {
        BlendEnable = true;
        BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha);
        BlendEquation = FuncAdd;
        
        DepthTestEnable = true;
        DepthFunc = LEqual;
        DepthMask = true;
        CullFaceEnable = true;
        CullFace = Back;
        PolygonMode = int2(Front, Fill);
        
        VertexProgram = compile arbvp1 PostRefractNormalTex_VS();        
        FragmentProgram = compile arbfp1 PostRefractNormalTexWithOverlay_PS();
    }  
}

technique PostRefractNormalTexWithNoise {

    pass p0 < string Script = "Draw=geometry;"; > {

        BlendEnable = true;
        BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha);
        
        DepthTestEnable = true;
        DepthFunc = LEqual;
        CullFaceEnable = true;
        CullFace = Back;
        PolygonMode = int2(Front, Fill);
        
        VertexProgram = compile arbvp1 PostRefractNormalTexWithNoise_VS();        
        FragmentProgram = compile arbfp1 PostRefractNormalTexWithNoise_PS();
    }  
}

/////////////////////////////////////// eof //
